package ai

import (
	"context"
	"fmt"
	"regexp"
	"sort"
	"strconv"
	"strings"

	"iafarma/internal/zapplus"
	"iafarma/pkg/models"

	"github.com/google/uuid"
	"github.com/rs/zerolog/log"
)

// formatCurrency formats a price string to Brazilian currency format
func formatCurrency(priceStr string) string {
	if priceStr == "" {
		return "0,00"
	}

	// Parse the price as float
	price, err := strconv.ParseFloat(priceStr, 64)
	if err != nil {
		return priceStr // Return original if parsing fails
	}

	// Format to 2 decimal places with Brazilian formatting
	formatted := fmt.Sprintf("%.2f", price)

	// Replace dot with comma for decimal separator
	formatted = strings.ReplaceAll(formatted, ".", ",")

	// Add thousand separators if needed (for values >= 1000)
	parts := strings.Split(formatted, ",")
	integerPart := parts[0]
	decimalPart := parts[1]

	// Add dots for thousands
	if len(integerPart) > 3 {
		var result []rune
		for i, digit := range integerPart {
			if i > 0 && (len(integerPart)-i)%3 == 0 {
				result = append(result, '.')
			}
			result = append(result, digit)
		}
		integerPart = string(result)
	}

	return integerPart + "," + decimalPart
}

// getEffectivePrice returns the sale price if available, otherwise the regular price
func getEffectivePrice(product *models.Product) string {
	if product.SalePrice != "" && product.SalePrice != "0" && product.SalePrice != "0.00" {
		return product.SalePrice
	}
	return product.Price
}

func (s *AIService) handleConsultarItens(tenantID uuid.UUID, customerPhone string, args map[string]interface{}) (string, error) {
	query := ""
	if q, ok := args["query"].(string); ok {
		query = q
	}

	log.Info().
		Str("tenant_id", tenantID.String()).
		Str("customer_phone", customerPhone).
		Str("query", query).
		Interface("args", args).
		Msg("üîç DEBUG: handleConsultarItens called")

	promocional := false
	if p, ok := args["promocional"].(bool); ok {
		promocional = p
	}

	limite := 10
	if l, ok := args["limite"].(float64); ok {
		limite = int(l)
	}

	// Se √© uma query gen√©rica para mostrar produtos, n√£o aplicar limite
	isGenericProductQuery := query == "" ||
		query == "produtos" ||
		query == "cat√°logo" ||
		query == "todos" ||
		query == "mostrar produtos" ||
		query == "ver produtos" ||
		query == "listar produtos" ||
		query == "produtos dispon√≠veis" ||
		query == "card√°pio" ||
		query == "menu" ||
		strings.Contains(strings.ToLower(query), "mostrar") && strings.Contains(strings.ToLower(query), "produto") ||
		strings.Contains(strings.ToLower(query), "ver") && strings.Contains(strings.ToLower(query), "produto") ||
		strings.Contains(strings.ToLower(query), "listar") && strings.Contains(strings.ToLower(query), "produto")

	if isGenericProductQuery {
		limite = 0 // Remove o limite para consultas gen√©ricas
		log.Info().
			Bool("is_generic_query", isGenericProductQuery).
			Int("limite", limite).
			Msg("üîç DEBUG: Generic product query detected")
	}

	// Novos filtros avan√ßados
	marca := ""
	if m, ok := args["marca"].(string); ok {
		marca = m
	}

	tags := ""
	if t, ok := args["tags"].(string); ok {
		tags = t
	}

	var precoMin, precoMax float64
	if pm, ok := args["preco_min"].(float64); ok {
		precoMin = pm
	}
	if pm, ok := args["preco_max"].(float64); ok {
		precoMax = pm
	}

	// Par√¢metro de ordena√ß√£o
	ordenarPor := ""
	if op, ok := args["ordenar_por"].(string); ok {
		ordenarPor = op
	}

	// Convers√£o para formato interno do SortBy
	var sortBy string
	switch ordenarPor {
	case "preco_menor":
		sortBy = "price_asc"
	case "preco_maior":
		sortBy = "price_desc"
	case "nome":
		sortBy = "name_asc"
	case "relevancia":
		sortBy = "relevance"
	default:
		sortBy = "relevance" // padr√£o
	}

	var products []models.Product
	var err error

	if promocional {
		products, err = s.productService.GetPromotionalProducts(tenantID)
	} else {
		// üéØ PRIORIDADE: Se h√° ordena√ß√£o por pre√ßo, usar busca SQL tradicional para garantir ordena√ß√£o correta
		if sortBy == "price_asc" || sortBy == "price_desc" {
			log.Info().Msgf("üîç Price Sort Priority: Using SQL search for price ordering '%s'", sortBy)
			filters := ProductSearchFilters{
				Query:    query,
				Brand:    marca,
				Tags:     tags,
				MinPrice: precoMin,
				MaxPrice: precoMax,
				SortBy:   sortBy,
				Limit:    limite,
			}
			products, err = s.productService.SearchProductsAdvanced(tenantID, filters)
		} else if query != "" && s.embeddingService != nil {
			// üéØ RAG/EMBEDDING para busca sem√¢ntica (quando n√£o h√° ordena√ß√£o por pre√ßo)
			log.Info().Msgf("üîç RAG Priority: Using semantic search for query='%s'", query)

			ragResults, ragErr := s.embeddingService.SearchSimilarProducts(query, tenantID.String(), limite)
			if ragErr == nil && len(ragResults) > 0 {
				log.Info().Msgf("üîç RAG Success: Found %d products via semantic search", len(ragResults))

				// Converter ResultSet do RAG para []models.Product
				productIDs := make([]uuid.UUID, 0, len(ragResults))
				for _, result := range ragResults {
					if productID, parseErr := uuid.Parse(result.ID); parseErr == nil {
						productIDs = append(productIDs, productID)
					}
				}

				// Buscar produtos completos usando os IDs encontrados pelo RAG
				if len(productIDs) > 0 {
					ragProducts := make([]models.Product, 0, len(productIDs))
					failedProducts := 0
					for _, productID := range productIDs {
						if product, getErr := s.productService.GetProductByID(tenantID, productID); getErr == nil {
							ragProducts = append(ragProducts, *product)
						} else {
							failedProducts++
							log.Warn().
								Err(getErr).
								Str("product_id", productID.String()).
								Str("tenant_id", tenantID.String()).
								Msg("üö® RAG Product Not Found: Product ID from RAG doesn't exist in database")
						}
					}

					if failedProducts > 0 {
						log.Warn().
							Int("total_rag_results", len(productIDs)).
							Int("failed_products", failedProducts).
							Int("successful_products", len(ragProducts)).
							Msg("üîç RAG Sync Issue: Some RAG results not found in database")
					}

					if len(ragProducts) > 0 {
						products = ragProducts
						log.Info().Msgf("üîç RAG Complete: Successfully retrieved %d products", len(products))
					}
				}
			} else {
				log.Warn().Err(ragErr).Msgf("üîç RAG Failed: %v, falling back to database search", ragErr)
			}
		}

		// FALLBACK: Se RAG n√£o funcionou ou n√£o retornou resultados, usar busca no banco
		if len(products) == 0 {
			log.Info().Msg("üîç Database Fallback: Using traditional database search")
			filters := ProductSearchFilters{
				Query:    query,
				Brand:    marca,
				Tags:     tags,
				MinPrice: precoMin,
				MaxPrice: precoMax,
				Limit:    limite,
				SortBy:   sortBy,
			}
			log.Info().
				Interface("filters", filters).
				Str("tenant_id", tenantID.String()).
				Msg("üîç DEBUG: SearchProductsAdvanced filters")

			products, err = s.productService.SearchProductsAdvanced(tenantID, filters)

			log.Info().
				Int("products_found", len(products)).
				Err(err).
				Msg("üîç DEBUG: SearchProductsAdvanced result")
		}
	}

	if err != nil {
		return "‚ùå Erro ao buscar produtos. Tente novamente.", err
	}

	// Se n√£o h√° filtros espec√≠ficos (s√≥ query vazia ou gen√©rica) e √© uma consulta gen√©rica,
	// mostrar cat√°logo completo organizado por categorias
	if isGenericProductQuery && marca == "" && tags == "" && precoMin == 0 && precoMax == 0 {
		log.Info().
			Int("products_count", len(products)).
			Bool("is_generic_query", isGenericProductQuery).
			Msg("üîç DEBUG: Calling formatProductsByCategoryComplete")
		return s.formatProductsByCategoryComplete(tenantID, customerPhone, products)
	}

	if len(products) == 0 {
		// Tentar sugest√µes alternativas baseadas nos produtos do tenant
		suggestions := s.generateDynamicSearchSuggestions(tenantID, query, marca, tags)

		filterDesc := ""
		if query != "" {
			filterDesc += fmt.Sprintf(" com '%s'", query)
		}
		if marca != "" {
			filterDesc += fmt.Sprintf(" da marca '%s'", marca)
		}
		if tags != "" {
			filterDesc += fmt.Sprintf(" na categoria '%s'", tags)
		}
		if precoMin > 0 || precoMax > 0 {
			if precoMin > 0 && precoMax > 0 {
				filterDesc += fmt.Sprintf(" entre R$ %.2f e R$ %.2f", precoMin, precoMax)
			} else if precoMin > 0 {
				filterDesc += fmt.Sprintf(" acima de R$ %.2f", precoMin)
			} else {
				filterDesc += fmt.Sprintf(" abaixo de R$ %.2f", precoMax)
			}
		}

		response := fmt.Sprintf("‚ùå Nenhum produto encontrado%s.", filterDesc)

		if len(suggestions) > 0 {
			response += "\n\nüí° **Voc√™ quis dizer:**\n"
			for _, suggestion := range suggestions {
				response += fmt.Sprintf("‚Ä¢ %s\n", suggestion)
			}
			response += "\nüìù Tente um desses termos ou use 'produtos' para ver nosso cat√°logo completo."
		} else {
			response += "\n\nÔøΩ **Dica:** Tente termos mais espec√≠ficos ou use 'produtos' para ver nosso cat√°logo."
		}

		return response, nil
	}

	// Armazenar produtos na mem√≥ria com numera√ß√£o sequencial
	productRefs := s.memoryManager.StoreProductList(tenantID, customerPhone, products)

	result := "üõçÔ∏è **Produtos dispon√≠veis:**\n\n"

	// Mostrar filtros aplicados se houver
	if query != "" || marca != "" || tags != "" || precoMin > 0 || precoMax > 0 {
		result += "üîç **Filtros aplicados:** "
		filters := []string{}
		if query != "" {
			filters = append(filters, fmt.Sprintf("Busca: '%s'", query))
		}
		if marca != "" {
			filters = append(filters, fmt.Sprintf("Marca: %s", marca))
		}
		if tags != "" {
			filters = append(filters, fmt.Sprintf("Categoria: %s", tags))
		}
		if precoMin > 0 && precoMax > 0 {
			filters = append(filters, fmt.Sprintf("Pre√ßo: R$ %.2f - R$ %.2f", precoMin, precoMax))
		} else if precoMin > 0 {
			filters = append(filters, fmt.Sprintf("Pre√ßo m√≠n: R$ %.2f", precoMin))
		} else if precoMax > 0 {
			filters = append(filters, fmt.Sprintf("Pre√ßo m√°x: R$ %.2f", precoMax))
		}
		result += strings.Join(filters, ", ") + "\n\n"
	}

	for _, productRef := range productRefs {
		if productRef.SequentialID > limite {
			break
		}

		var price string
		if productRef.SalePrice != "" && productRef.SalePrice != "0" {
			price = fmt.Sprintf("~~R$ %s~~ **R$ %s**", formatCurrency(productRef.Price), formatCurrency(productRef.SalePrice))
		} else {
			price = fmt.Sprintf("**R$ %s**", formatCurrency(productRef.Price))
		}

		result += fmt.Sprintf("%d. **%s**\n", productRef.SequentialID, productRef.Name)
		result += fmt.Sprintf("   üí∞ %s\n", price)
		if productRef.Description != "" {
			desc := productRef.Description
			if len(desc) > 100 {
				desc = desc[:100] + "..."
			}
			result += fmt.Sprintf("   üìù %s\n", desc)
		}
		result += "\n"
	}

	result += "üí° Para ver detalhes, diga: 'produto [n√∫mero]' ou 'produto [nome]'\n"
	result += "üõí Para adicionar ao carrinho: 'adicionar [n√∫mero] quantidade [X]'"

	return result, nil
}

func (s *AIService) handleMostrarOpcoesCategoria(tenantID uuid.UUID, customerPhone string, args map[string]interface{}) (string, error) {
	categoria, ok := args["categoria"].(string)
	if !ok {
		return "‚ùå Categoria √© obrigat√≥ria.", nil
	}

	limite := 10
	if l, ok := args["limite"].(float64); ok {
		limite = int(l)
	}

	log.Info().
		Str("categoria", categoria).
		Int("limite", limite).
		Msg("üçï Mostrando op√ß√µes de categoria")

	// Buscar produtos da categoria
	products, err := s.productService.SearchProducts(tenantID, categoria, limite)
	if err != nil {
		return "‚ùå Erro ao buscar produtos.", err
	}

	if len(products) == 0 {
		return fmt.Sprintf("‚ùå N√£o encontrei produtos para '%s'. Tente outro termo ou veja nosso cat√°logo completo.", categoria), nil
	}

	// üîë CRUCIAL: Armazenar produtos na mem√≥ria sequencial
	productRefs := s.memoryManager.StoreProductList(tenantID, customerPhone, products)

	// Gerar resposta personalizada baseada na categoria
	titulo := fmt.Sprintf("üõçÔ∏è Op√ß√µes de %s", categoria)

	result := fmt.Sprintf("%s que temos:\n\n", titulo)

	for _, productRef := range productRefs {
		var price string
		if productRef.SalePrice != "" && productRef.SalePrice != "0" {
			price = fmt.Sprintf("~~R$ %s~~ **R$ %s**", formatCurrency(productRef.Price), formatCurrency(productRef.SalePrice))
		} else {
			price = fmt.Sprintf("**R$ %s**", formatCurrency(productRef.Price))
		}

		result += fmt.Sprintf("%d. **%s**\n", productRef.SequentialID, productRef.Name)
		result += fmt.Sprintf("   üí∞ %s\n", price)

		// Adicionar descri√ß√£o se dispon√≠vel
		if productRef.Description != "" {
			desc := productRef.Description
			if len(desc) > 80 {
				desc = desc[:80] + "..."
			}
			result += fmt.Sprintf("   %s\n", desc)
		}
		result += "\n"
	}

	result += "Qual dessas op√ß√µes voc√™ gostaria de pedir?"

	return result, nil
}

func (s *AIService) handleDetalharItem(tenantID uuid.UUID, customerPhone string, args map[string]interface{}) (string, error) {
	identifier, ok := args["identifier"].(string)
	if !ok {
		return "‚ùå Identificador do produto √© obrigat√≥rio (n√∫mero ou nome).", nil
	}

	var product *models.Product
	var err error

	// Tentar converter para n√∫mero sequencial primeiro
	if sequentialID, parseErr := strconv.Atoi(identifier); parseErr == nil {
		// √â um n√∫mero - buscar na mem√≥ria
		productRef := s.memoryManager.GetProductBySequentialID(tenantID, customerPhone, sequentialID)
		if productRef != nil {
			product, err = s.productService.GetProductByID(tenantID, productRef.ProductID)
		} else {
			return "‚ùå Produto n√£o encontrado. Use 'produtos' para ver a lista atualizada.", nil
		}
	} else {
		// N√£o √© n√∫mero - tentar buscar por nome na mem√≥ria
		productRef := s.memoryManager.GetProductByName(tenantID, customerPhone, identifier)
		if productRef != nil {
			product, err = s.productService.GetProductByID(tenantID, productRef.ProductID)
		} else {
			// Tentar como UUID se n√£o encontrou na mem√≥ria
			if productID, uuidErr := uuid.Parse(identifier); uuidErr == nil {
				product, err = s.productService.GetProductByID(tenantID, productID)
			} else {
				return "‚ùå Produto n√£o encontrado. Use 'produtos' para ver a lista atualizada.", nil
			}
		}
	}

	if err != nil || product == nil {
		return "‚ùå Produto n√£o encontrado.", err
	}

	result := "üîç **Detalhes do Produto**\n\n"
	result += fmt.Sprintf("üì¶ **Nome:** %s\n", product.Name)

	if product.SalePrice != "" && product.SalePrice != "0" {
		result += fmt.Sprintf("üí∞ **Pre√ßo:** ~~R$ %s~~ **R$ %s** (PROMO√á√ÉO! üéâ)\n", formatCurrency(product.Price), formatCurrency(product.SalePrice))
	} else {
		result += fmt.Sprintf("üí∞ **Pre√ßo:** R$ %s\n", formatCurrency(product.Price))
	}

	if product.Description != "" {
		result += fmt.Sprintf("üìù **Descri√ß√£o:** %s\n", product.Description)
	}

	if product.SKU != "" {
		result += fmt.Sprintf("üè∑Ô∏è **SKU:** %s\n", product.SKU)
	}

	if product.StockQuantity > 0 {
		result += fmt.Sprintf("üìä **Estoque:** %d unidades dispon√≠veis\n", product.StockQuantity)
	} else {
		result += "‚ö†Ô∏è **Estoque:** Produto indispon√≠vel\n"
	}

	if product.Brand != "" {
		result += fmt.Sprintf("üè≠ **Marca:** %s\n", product.Brand)
	}

	if product.Weight != "" {
		result += fmt.Sprintf("‚öñÔ∏è **Peso:** %s\n", product.Weight)
	}

	result += "\nüõí Para adicionar ao carrinho, diga: 'adicionar ao carrinho quantidade [X]'"

	return result, nil
}

// addToCartWithFallback tenta m√∫ltiplas estrat√©gias para adicionar produto ao carrinho
func (s *AIService) addToCartWithFallback(tenantID, customerID uuid.UUID, customerPhone, identifier string, quantidade int) (string, error) {
	log.Info().
		Str("identifier", identifier).
		Int("quantidade", quantidade).
		Msg("üõí Tentando adicionar ao carrinho com fallback")

	// Estrat√©gia 1: Tentar por n√∫mero sequencial (mais comum)
	if sequentialID, parseErr := strconv.Atoi(identifier); parseErr == nil {
		productRef := s.memoryManager.GetProductBySequentialID(tenantID, customerPhone, sequentialID)
		if productRef != nil {
			if result, err := s.tryAddProductToCart(tenantID, customerID, productRef.ProductID, quantidade); err == nil {
				log.Info().Msg("‚úÖ Sucesso: Produto adicionado por n√∫mero sequencial")
				return result, nil
			}
		}
		log.Info().Msg("‚ùå Falha: Produto n√£o encontrado por n√∫mero sequencial")
	}

	// Estrat√©gia 2: Tentar por UUID
	if productID, uuidErr := uuid.Parse(identifier); uuidErr == nil {
		if result, err := s.tryAddProductToCart(tenantID, customerID, productID, quantidade); err == nil {
			log.Info().Msg("‚úÖ Sucesso: Produto adicionado por UUID")
			return result, nil
		}
		log.Info().Msg("‚ùå Falha: Produto n√£o encontrado por UUID")
	}

	// Estrat√©gia 3: Tentar por nome (busca fuzzy)
	if result, err := s.tryAddProductByName(tenantID, customerID, customerPhone, identifier, quantidade); err == nil {
		log.Info().Msg("‚úÖ Sucesso: Produto adicionado por nome")
		return result, nil
	}
	log.Info().Msg("‚ùå Falha: Produto n√£o encontrado por nome")

	// Estrat√©gia 4: Tentar buscar no contexto da conversa recente
	if result, err := s.tryAddFromRecentContext(tenantID, customerID, customerPhone, identifier, quantidade); err == nil {
		log.Info().Msg("‚úÖ Sucesso: Produto adicionado do contexto recente")
		return result, nil
	}
	log.Info().Msg("‚ùå Falha: Produto n√£o encontrado no contexto recente")

	// Se todas as estrat√©gias falharam, retornar mensagem amig√°vel
	return "‚ùå N√£o consegui identificar esse produto. üîç\n\nüí° **Dicas:**\n‚Ä¢ Use 'produtos' para ver nossa lista\n‚Ä¢ Use 'buscar [nome]' para encontrar um item espec√≠fico\n‚Ä¢ Ou digite o nome do produto que voc√™ quer", nil
}

// tryAddProductToCart tenta adicionar um produto espec√≠fico ao carrinho
func (s *AIService) tryAddProductToCart(tenantID, customerID, productID uuid.UUID, quantidade int) (string, error) {
	product, err := s.productService.GetProductByID(tenantID, productID)
	if err != nil || product == nil {
		return "", fmt.Errorf("produto n√£o encontrado")
	}

	if product.StockQuantity < quantidade {
		return fmt.Sprintf("‚ùå Estoque insuficiente para **%s**. Dispon√≠vel: %d unidades.", product.Name, product.StockQuantity), nil
	}

	cart, err := s.cartService.GetOrCreateActiveCart(tenantID, customerID)
	if err != nil {
		return "", fmt.Errorf("erro ao acessar carrinho")
	}

	err = s.cartService.AddItemToCart(cart.ID, tenantID, product.ID, quantidade)
	if err != nil {
		return "", fmt.Errorf("erro ao adicionar item ao carrinho")
	}

	adicional := "\n\nVoc√™ pode continuar comprando ou digite 'finalizar' para fechar o pedido."

	return fmt.Sprintf("‚úÖ **%s** adicionado ao carrinho!\nüî¢ Quantidade: %d\nüí∞ Valor: R$ %s",
		product.Name, quantidade, formatCurrency(getEffectivePrice(product))) + adicional, nil
}

// tryAddProductByName tenta adicionar produto pelo nome
func (s *AIService) tryAddProductByName(tenantID, customerID uuid.UUID, customerPhone, nomeProduto string, quantidade int) (string, error) {
	products, err := s.productService.SearchProducts(tenantID, nomeProduto, 5)
	if err != nil || len(products) == 0 {
		return "", fmt.Errorf("nenhum produto encontrado")
	}

	// Se encontrou exatamente 1 produto, adicionar
	if len(products) == 1 {
		return s.tryAddProductToCart(tenantID, customerID, products[0].ID, quantidade)
	}

	// Se encontrou m√∫ltiplos, verificar se h√° match exato
	nomeLower := strings.ToLower(nomeProduto)
	for _, product := range products {
		if strings.ToLower(product.Name) == nomeLower {
			return s.tryAddProductToCart(tenantID, customerID, product.ID, quantidade)
		}
	}

	return "", fmt.Errorf("m√∫ltiplos produtos encontrados")
}

// tryAddFromRecentContext tenta encontrar produto no contexto da conversa recente
func (s *AIService) tryAddFromRecentContext(tenantID, customerID uuid.UUID, customerPhone, identifier string, quantidade int) (string, error) {
	// Buscar nas mensagens recentes por produtos mencionados
	conversationHistory := s.memoryManager.GetConversationHistory(tenantID, customerPhone)
	if len(conversationHistory) == 0 {
		return "", fmt.Errorf("sem contexto recente")
	}

	// Procurar nas √∫ltimas 10 mensagens
	searchLimit := 10
	if len(conversationHistory) < searchLimit {
		searchLimit = len(conversationHistory)
	}

	identifierLower := strings.ToLower(identifier)

	// Reverter a busca (mensagens mais recentes primeiro)
	for i := len(conversationHistory) - 1; i >= len(conversationHistory)-searchLimit && i >= 0; i-- {
		message := conversationHistory[i]
		if message.Role == "assistant" {
			messageLower := strings.ToLower(message.Content)

			// Procurar por n√∫meros seguidos de produtos mencionados
			if strings.Contains(messageLower, identifierLower) {
				// Tentar extrair produtos mencionados na mensagem
				if products, err := s.extractProductsFromMessage(tenantID, message.Content); err == nil && len(products) > 0 {
					// Se o identificador √© um n√∫mero, usar como √≠ndice
					if idx, parseErr := strconv.Atoi(identifier); parseErr == nil && idx > 0 && idx <= len(products) {
						return s.tryAddProductToCart(tenantID, customerID, products[idx-1].ID, quantidade)
					}
				}
			}
		}
	}

	return "", fmt.Errorf("produto n√£o encontrado no contexto")
}

// extractProductsFromMessage extrai produtos mencionados em uma mensagem
func (s *AIService) extractProductsFromMessage(tenantID uuid.UUID, message string) ([]*models.Product, error) {
	var products []*models.Product

	// Buscar por padr√µes como "1. Nome do Produto" ou "1‚Å†. Nome:"
	// Usar character class simples para evitar problemas com Unicode
	re := regexp.MustCompile(`^\d+[\.\s]+\s*([^:]+):`)

	lines := strings.Split(message, "\n")
	for _, line := range lines {
		// Padr√£o: n√∫mero seguido de ponto e nome
		if re.MatchString(line) {
			matches := re.FindStringSubmatch(line)
			if len(matches) > 1 {
				productName := strings.TrimSpace(matches[1])
				if foundProducts, err := s.productService.SearchProducts(tenantID, productName, 1); err == nil && len(foundProducts) > 0 {
					products = append(products, &foundProducts[0])
				}
			}
		}
	}

	return products, nil
}

func (s *AIService) handleAdicionarAoCarrinho(tenantID, customerID uuid.UUID, customerPhone string, args map[string]interface{}) (string, error) {
	identifier, ok := args["identifier"].(string)
	if !ok {
		return "‚ùå Identificador do produto √© obrigat√≥rio (n√∫mero ou ID).", nil
	}

	quantidadeFloat, ok := args["quantidade"].(float64)
	if !ok {
		return "‚ùå Quantidade √© obrigat√≥ria.", nil
	}
	quantidade := int(quantidadeFloat)

	if quantidade <= 0 {
		return "‚ùå Quantidade deve ser maior que zero.", nil
	}

	// Usar o sistema de fallback
	return s.addToCartWithFallback(tenantID, customerID, customerPhone, identifier, quantidade)
}

func (s *AIService) handleAdicionarProdutoPorNome(tenantID, customerID uuid.UUID, customerPhone string, args map[string]interface{}) (string, error) {
	nomeProduto, ok := args["nome_produto"].(string)
	if !ok {
		return "‚ùå Nome do produto √© obrigat√≥rio.", nil
	}

	quantidadeFloat, ok := args["quantidade"].(float64)
	if !ok {
		return "‚ùå Quantidade √© obrigat√≥ria.", nil
	}
	quantidade := int(quantidadeFloat)

	if quantidade <= 0 {
		return "‚ùå Quantidade deve ser maior que zero.", nil
	}

	// Buscar produtos pelo nome com busca mais flex√≠vel
	products, err := s.productService.SearchProducts(tenantID, nomeProduto, 10)
	if err != nil {
		return "‚ùå Erro ao buscar produtos.", err
	}

	if len(products) == 0 {
		// return fmt.Sprintf("‚ùå Nenhum produto encontrado com '%s'. \n\nüí° **Dica:** Tente termos mais espec√≠ficos ou use 'produtos' para ver nosso cat√°logo.", nomeProduto), nil
		return fmt.Sprintf("üîç *Ops! N√£o encontramos '%s'*\n\nüí° Que tal tentar:\n‚Ä¢ Termos mais curtos ou espec√≠ficos\n‚Ä¢ Digitar 'produtos' para ver tudo o que temos\n‚Ä¢ Procurar por categoria\n\nEstamos juntos nessa! üí™", nomeProduto), nil
	}

	// Se encontrou apenas um produto, adicionar diretamente
	if len(products) == 1 {
		product := &products[0]

		if product.StockQuantity < quantidade {
			return fmt.Sprintf("‚ùå Estoque insuficiente para **%s**. Dispon√≠vel: %d unidades.", product.Name, product.StockQuantity), nil
		}

		// Obter ou criar carrinho ativo
		cart, err := s.cartService.GetOrCreateActiveCart(tenantID, customerID)
		if err != nil {
			return "‚ùå Erro ao acessar carrinho.", err
		}

		// Adicionar item ao carrinho
		err = s.cartService.AddItemToCart(cart.ID, tenantID, product.ID, quantidade)
		if err != nil {
			return "‚ùå Erro ao adicionar item ao carrinho.", err
		}

		adicional := "\n\nVoc√™ pode continuar comprando ou digite 'finalizar' para fechar o pedido."
		return fmt.Sprintf("‚úÖ **%s** adicionado ao carrinho!\nüî¢ Quantidade: %d\nüí∞ Valor: R$ %s",
			product.Name, quantidade, formatCurrency(getEffectivePrice(product))) + adicional, nil
	}

	// Se encontrou m√∫ltiplos produtos, mostrar op√ß√µes
	productRefs := s.memoryManager.StoreProductList(tenantID, customerPhone, products)

	result := fmt.Sprintf("üîç Encontrei %d produtos similares a '%s':\n\n", len(products), nomeProduto)
	for _, productRef := range productRefs {
		// Usar nosso padr√£o de formata√ß√£o
		var priceStr string
		if productRef.SalePrice != "" && productRef.SalePrice != "0" {
			priceStr = fmt.Sprintf("~~R$ %s~~ **R$ %s**", formatCurrency(productRef.Price), formatCurrency(productRef.SalePrice))
		} else {
			priceStr = fmt.Sprintf("**R$ %s**", formatCurrency(productRef.Price))
		}

		result += fmt.Sprintf("%d. **%s**\n   üí∞ %s\n", productRef.SequentialID, productRef.Name, priceStr)
	}

	result += "\nüìù Para adicionar ao carrinho basta informar o numero do item ou nome do produto.\n"
	// Don't add instruction message here - let AI handle it contextually
	return result, nil
}

func (s *AIService) handleRemoverDoCarrinho(tenantID, customerID uuid.UUID, args map[string]interface{}) (string, error) {
	// Try to get item number first (new approach)
	if itemNumberFloat, ok := args["item_number"].(float64); ok {
		itemNumber := int(itemNumberFloat)

		cartItem, err := s.getCartItemByNumber(tenantID, customerID, itemNumber)
		if err != nil {
			return "‚ùå Item n√£o encontrado no carrinho. Use 'ver carrinho' para conferir os n√∫meros.", nil
		}

		// Get cart
		cart, err := s.cartService.GetOrCreateActiveCart(tenantID, customerID)
		if err != nil {
			return "‚ùå Erro ao acessar carrinho.", err
		}

		// Remove item by ID
		err = s.cartService.RemoveItemFromCart(cart.ID, tenantID, cartItem.ID)
		if err != nil {
			return "‚ùå Erro ao remover item do carrinho.", err
		}

		return fmt.Sprintf("‚úÖ **%s** removido do carrinho com sucesso!", getItemName(*cartItem)), nil
	}

	// Fallback to old ID-based approach for compatibility
	itemIDStr, ok := args["item_id"].(string)
	if !ok {
		return "‚ùå N√∫mero do item √© obrigat√≥rio.", nil
	}

	itemID, err := uuid.Parse(itemIDStr)
	if err != nil {
		return "‚ùå N√∫mero do item inv√°lido.", nil
	}

	// Obter carrinho ativo
	cart, err := s.cartService.GetOrCreateActiveCart(tenantID, customerID)
	if err != nil {
		return "‚ùå Erro ao acessar carrinho.", err
	}

	// Remover item do carrinho
	err = s.cartService.RemoveItemFromCart(cart.ID, tenantID, itemID)
	if err != nil {
		return "‚ùå Erro ao remover item do carrinho.", err
	}

	return "‚úÖ Item removido do carrinho com sucesso!", nil
}

// handleVerCarrinhoWithOptions permite controlar se mostra as instru√ß√µes de gerenciamento
func (s *AIService) handleVerCarrinhoWithOptions(tenantID, customerID uuid.UUID, showManagementInstructions bool) (string, error) {
	// Obter carrinho com itens
	cart, err := s.cartService.GetOrCreateActiveCart(tenantID, customerID)
	if err != nil {
		return "‚ùå Erro ao acessar carrinho.", err
	}

	cartWithItems, err := s.cartService.GetCartWithItems(cart.ID, tenantID)
	if err != nil {
		return "‚ùå Erro ao carregar itens do carrinho.", err
	}

	if len(cartWithItems.Items) == 0 {
		return "üõí Seu carrinho est√° vazio!\n\nüí° Explore nossos produtos e adicione alguns itens.", nil
	}

	result := "üõí **Seu Carrinho:**\n\n"
	total := 0.0

	for i, item := range cartWithItems.Items {
		itemPrice, _ := strconv.ParseFloat(item.Price, 64)
		itemTotal := itemPrice * float64(item.Quantity)
		total += itemTotal

		result += fmt.Sprintf("%d. **%s**\n", i+1, getItemName(item))
		result += fmt.Sprintf("   üí∞ R$ %s x %d = R$ %s\n\n", formatCurrency(item.Price), item.Quantity, formatCurrency(fmt.Sprintf("%.2f", itemTotal)))
	}

	result += fmt.Sprintf("üí≥ **Total: R$ %s**", formatCurrency(fmt.Sprintf("%.2f", total)))

	// Adicionar instru√ß√µes de gerenciamento apenas quando solicitado
	if showManagementInstructions {
		result += "\n\nüõçÔ∏è Quando quiser finalizar, √© s√≥ avisar!\n"
		result += "üìù Para alterar quantidade: 'alterar item [n√∫mero] para [quantidade]'\n"
		result += "üóëÔ∏è Para remover um item: 'remover item [n√∫mero]'\n"
		result += "üßπ Para limpar carrinho: 'limpar carrinho'"
	}

	return result, nil
}

func (s *AIService) handleLimparCarrinho(tenantID, customerID uuid.UUID) (string, error) {
	// Obter carrinho ativo
	cart, err := s.cartService.GetOrCreateActiveCart(tenantID, customerID)
	if err != nil {
		return "‚ùå Erro ao acessar carrinho.", err
	}

	// Limpar carrinho
	err = s.cartService.ClearCart(cart.ID, tenantID)
	if err != nil {
		return "‚ùå Erro ao limpar carrinho.", err
	}

	return "üßπ ‚úÖ Carrinho limpo com sucesso!\n\nüõçÔ∏è Agora voc√™ pode adicionar novos produtos.", nil
}

func (s *AIService) handleAtualizarQuantidade(tenantID, customerID uuid.UUID, args map[string]interface{}) (string, error) {
	quantidadeFloat, ok := args["quantidade"].(float64)
	if !ok {
		return "‚ùå Quantidade √© obrigat√≥ria.", nil
	}
	quantidade := int(quantidadeFloat)

	if quantidade <= 0 {
		return "‚ùå Quantidade deve ser maior que zero.", nil
	}

	// Try to get item number first (new approach)
	if itemNumberFloat, ok := args["item_number"].(float64); ok {
		itemNumber := int(itemNumberFloat)

		cartItem, err := s.getCartItemByNumber(tenantID, customerID, itemNumber)
		if err != nil {
			return "‚ùå Item n√£o encontrado no carrinho. Use 'ver carrinho' para conferir os n√∫meros.", nil
		}

		// Get cart
		cart, err := s.cartService.GetOrCreateActiveCart(tenantID, customerID)
		if err != nil {
			return "‚ùå Erro ao acessar carrinho.", err
		}

		// Update quantity
		err = s.cartService.UpdateCartItemQuantity(cart.ID, tenantID, cartItem.ID, quantidade)
		if err != nil {
			return "‚ùå Erro ao atualizar quantidade do item.", err
		}

		return fmt.Sprintf("‚úÖ **%s** - quantidade atualizada para %d unidades!", getItemName(*cartItem), quantidade), nil
	}

	// Fallback to old ID-based approach for compatibility
	itemIDStr, ok := args["item_id"].(string)
	if !ok {
		return "‚ùå N√∫mero do item √© obrigat√≥rio.", nil
	}

	itemID, err := uuid.Parse(itemIDStr)
	if err != nil {
		return "‚ùå N√∫mero do item inv√°lido.", nil
	}

	// Obter carrinho ativo
	cart, err := s.cartService.GetOrCreateActiveCart(tenantID, customerID)
	if err != nil {
		return "‚ùå Erro ao acessar carrinho.", err
	}

	// Atualizar quantidade do item
	err = s.cartService.UpdateCartItemQuantity(cart.ID, tenantID, itemID, quantidade)
	if err != nil {
		return "‚ùå Erro ao atualizar quantidade do item.", err
	}

	return fmt.Sprintf("‚úÖ Quantidade atualizada para %d unidades!\n\nüõí Use 'ver carrinho' para conferir.", quantidade), nil
}

func (s *AIService) performFinalCheckout(tenantID, customerID uuid.UUID, customerPhone string) (string, error) {
	// Obter carrinho
	cart, err := s.cartService.GetOrCreateActiveCart(tenantID, customerID)
	if err != nil {
		return "‚ùå Erro ao acessar carrinho.", err
	}

	cartWithItems, err := s.cartService.GetCartWithItems(cart.ID, tenantID)
	if err != nil {
		return "‚ùå Erro ao carregar carrinho.", err
	}

	if len(cartWithItems.Items) == 0 {
		return "‚ùå Carrinho vazio! Adicione alguns produtos antes de finalizar.", nil
	}

	// üöö VALIDAR SE FAZEMOS ENTREGA NO ENDERE√áO DO CLIENTE ANTES DE CRIAR O PEDIDO
	addresses, err := s.addressService.GetAddressesByCustomer(tenantID, customerID)
	if err != nil || len(addresses) == 0 {
		return "‚ùå Nenhum endere√ßo encontrado. Por favor, cadastre um endere√ßo de entrega.\n\nüè† **Para cadastrar, informe seu endere√ßo completo:**\n\nüí° **Exemplo:** Rua das Flores, 123, Centro, Bras√≠lia, DF, CEP 70000-000, Complemento (se houver)", err
	}

	// Encontrar o endere√ßo padr√£o ou usar o primeiro
	var deliveryAddress *models.Address
	for _, addr := range addresses {
		if addr.IsDefault {
			deliveryAddress = &addr
			break
		}
	}
	if deliveryAddress == nil {
		deliveryAddress = &addresses[0]
	}

	// Validar se fazemos entrega neste endere√ßo
	log.Info().
		Str("tenant_id", tenantID.String()).
		Str("customer_id", customerID.String()).
		Str("address", fmt.Sprintf("%s, %s, %s, %s, %s", deliveryAddress.Street, deliveryAddress.Number, deliveryAddress.Neighborhood, deliveryAddress.City, deliveryAddress.State)).
		Msg("üöö Validando entrega antes do checkout final")

	deliveryResult, err := s.deliveryService.ValidateDeliveryAddress(
		tenantID,
		deliveryAddress.Street,
		deliveryAddress.Number,
		deliveryAddress.Neighborhood,
		deliveryAddress.City,
		deliveryAddress.State,
	)
	if err != nil {
		log.Error().Err(err).Msg("Erro ao validar endere√ßo de entrega")
		return "‚ùå Erro ao validar endere√ßo de entrega. Tente novamente ou entre em contato conosco.", err
	}

	// Se n√£o fazemos entrega neste endere√ßo, oferecer op√ß√£o de cadastrar novo
	if !deliveryResult.CanDeliver {
		addressText := formatAddressForDisplay(*deliveryAddress)

		var reason string
		switch deliveryResult.Reason {
		case "area_not_served":
			reason = "Esta regi√£o n√£o est√° em nossa √°rea de atendimento."
		case "outside_radius":
			reason = "Este endere√ßo est√° fora da nossa √°rea de entrega."
		case "no_store_location":
			reason = "Nossa loja ainda n√£o tem localiza√ß√£o configurada."
		default:
			reason = "N√£o conseguimos atender este endere√ßo no momento."
		}

		return fmt.Sprintf("üö´ **N√£o fazemos entrega neste endere√ßo:**\n\nüìç **Endere√ßo atual:**\n%s\n\n‚ö†Ô∏è **Motivo:** %s\n\nüè† **Op√ß√µes:**\n1Ô∏è‚É£ **Cadastrar novo endere√ßo:** Informe um endere√ßo completo onde fazemos entrega\n2Ô∏è‚É£ **Gerenciar endere√ßos:** Digite 'meus endere√ßos' para ver/alterar\n3Ô∏è‚É£ **Verificar √°rea:** Digite 'fazem entrega em [local]?' para verificar outras regi√µes\n\nüí° **Para continuar, informe um novo endere√ßo de entrega.**",
			addressText, reason), nil
	}

	// Endere√ßo validado - prosseguir com a cria√ß√£o do pedido
	log.Info().
		Str("delivery_reason", deliveryResult.Reason).
		Str("distance", deliveryResult.Distance).
		Bool("can_deliver", deliveryResult.CanDeliver).
		Msg("‚úÖ Endere√ßo de entrega validado com sucesso")

	// Buscar conversation ID armazenado para esta sess√£o
	conversationID := s.getConversationID(tenantID, customerPhone)

	// Criar pedido com status pendente incluindo o endere√ßo de entrega e conversation ID
	var order *models.Order

	if conversationID != uuid.Nil {
		log.Info().Str("conversation_id", conversationID.String()).Msg("üîó Criando pedido com conversation ID")
		order, err = s.orderService.CreateOrderFromCartWithConversation(tenantID, cart.ID, conversationID, deliveryAddress)
	} else {
		log.Warn().Msg("‚ö†Ô∏è Nenhum conversation ID encontrado, criando pedido sem conversation ID")
		order, err = s.orderService.CreateOrderFromCartWithAddress(tenantID, cart.ID, deliveryAddress)
	}
	if err != nil {
		log.Error().Err(err).Msg("Erro ao criar pedido no checkout final")
		return "‚ùå Erro ao criar pedido.", err
	}

	log.Info().
		Str("order_number", order.OrderNumber).
		Str("total", order.TotalAmount).
		Str("delivery_address", fmt.Sprintf("%s, %s, %s, %s", deliveryAddress.Street, deliveryAddress.Number, deliveryAddress.Neighborhood, deliveryAddress.City)).
		Msg("Pedido criado com sucesso no checkout final")

	// üßπ LIMPEZA COMPLETA AP√ìS PEDIDO CRIADO
	s.cleanupAfterOrderCreation(tenantID, customerID, customerPhone, cart.ID)

	// Send alert notification if configured
	if s.alertService != nil {
		if err := s.alertService.SendOrderAlert(tenantID, order, customerPhone); err != nil {
			log.Error().Err(err).Msg("Erro ao enviar alerta do pedido")
		}
	}

	return fmt.Sprintf("üéâ **Pedido registrado com sucesso!**\n\nüìã **N√∫mero do Pedido:** %s\nüí∞ **Total:** R$ %s\nüì¶ **Status:** Pendente\n\n‚úÖ **Seu pedido foi registrado em nosso sistema!**\n\nüë• Um de nossos operadores ir√° revisar e confirmar seu pedido em breve.\nüìû Voc√™ ser√° contatado para confirmar os detalhes da entrega e pagamento.\n\nüîç Acompanhe seu pedido pelo n√∫mero: **%s**",
		order.OrderNumber,
		formatCurrency(order.TotalAmount),
		order.OrderNumber), nil
}

// cleanupAfterOrderCreation limpa carrinho, mem√≥ria e dados do RAG ap√≥s pedido criado
func (s *AIService) cleanupAfterOrderCreation(tenantID, customerID uuid.UUID, customerPhone string, cartID uuid.UUID) {
	log.Info().
		Str("tenant_id", tenantID.String()).
		Str("customer_id", customerID.String()).
		Str("customer_phone", customerPhone).
		Msg("üßπ Iniciando limpeza completa ap√≥s cria√ß√£o do pedido")

	// 1. Limpar carrinho (j√° processado, mas garantir que est√° limpo)
	if err := s.cartService.ClearCart(cartID, tenantID); err != nil {
		log.Warn().Err(err).Msg("‚ùå Falha ao limpar carrinho ap√≥s pedido")
	} else {
		log.Info().Msg("‚úÖ Carrinho limpo")
	}

	// 2. Limpar mem√≥ria da conversa atual (produtos listados, contexto tempor√°rio)
	s.memoryManager.ClearMemory(tenantID, customerPhone)
	log.Info().Msg("‚úÖ Mem√≥ria da conversa limpa")

	// 3. N√£o limpar o RAG (hist√≥rico de conversas) - manter para contexto futuro
	// O RAG deve ser mantido para aprender com as intera√ß√µes do cliente

	log.Info().Msg("üßπ ‚úÖ Limpeza completa finalizada - sistema pronto para novo pedido")
}

func (s *AIService) handleCheckout(tenantID, customerID uuid.UUID, customerPhone string) (string, error) {
	// PRIMEIRO: Sempre mostrar o carrinho para o cliente conferir (sem instru√ß√µes de gerenciamento)
	cartMessage, err := s.handleVerCarrinhoWithOptions(tenantID, customerID, false)
	if err != nil {
		return "‚ùå Erro ao verificar carrinho.", err
	}

	// Se carrinho est√° vazio, n√£o prosseguir
	if strings.Contains(cartMessage, "carrinho est√° vazio") {
		return "‚ùå Carrinho vazio! Adicione alguns produtos antes de finalizar.", nil
	}

	// üö® CORRE√á√ÉO: SEMPRE retornar o resumo do carrinho primeiro
	// O cliente deve ver todos os itens antes de confirmar o pedido

	// Verificar se cliente tem dados necess√°rios
	customer, err := s.customerService.GetCustomerByID(tenantID, customerID)
	if err != nil {
		return "‚ùå Erro ao verificar dados do cliente.", err
	}

	if customer.Name == "" {
		return fmt.Sprintf("%s\n\nüìù Para seguir com seu pedido, precisamos completar o seu cadastro.\n\nüôã‚Äç‚ôÇÔ∏è **Por favor, me informe seu nome completo:**", cartMessage), nil
	}

	// üí≥ VALIDA√á√ÉO OBRIGAT√ìRIA: Verificar se forma de pagamento foi selecionada (ANTES do endere√ßo)
	// Primeiro obter o carrinho ativo
	activeCart, err := s.cartService.GetOrCreateActiveCart(tenantID, customerID)
	if err != nil {
		return "‚ùå Erro ao verificar carrinho.", err
	}

	// Agora buscar com os itens
	cart, err := s.cartService.GetCartWithItems(activeCart.ID, tenantID)
	if err != nil {
		return "‚ùå Erro ao verificar carrinho.", err
	}

	if cart.PaymentMethodID == nil {
		// Buscar formas de pagamento dispon√≠veis
		paymentOptions, err := s.orderService.GetPaymentOptions(tenantID)
		if err != nil || len(paymentOptions) == 0 {
			// Se n√£o h√° formas de pagamento cadastradas, continuar sem bloquear
			log.Warn().Str("tenant_id", tenantID.String()).Msg("Nenhuma forma de pagamento cadastrada para o tenant")
		} else {
			// Mostrar op√ß√µes de pagamento e bloquear at√© escolher
			result := fmt.Sprintf("%s\n\nüí≥ **Escolha a forma de pagamento:**\n\n", cartMessage)
			for i, option := range paymentOptions {
				result += fmt.Sprintf("%d. %s\n", i+1, option.Name)
			}
			result += "\nüí¨ **Como voc√™ quer pagar?** Me diga o n√∫mero ou nome da forma de pagamento.\n"
			result += "\nüí° **Exemplo:** 'quero pagar com PIX' ou 'n√∫mero 1'"

			return result, nil
		}
	}

	// Verificar se tem endere√ßos
	addresses, err := s.addressService.GetAddressesByCustomer(tenantID, customerID)
	if err != nil || len(addresses) == 0 {
		return fmt.Sprintf("%s\n\nüìù Para finalizar o pedido, precisamos do seu endere√ßo de entrega.\n\nüè† **Por favor, me informe seu endere√ßo completo:**\n\nüí° **Exemplo:** Rua das Flores, 123, Centro, Bras√≠lia, DF, CEP 70000-000, Complemento (se houver)", cartMessage), nil
	}

	// Se tem endere√ßos, verificar se h√° m√∫ltiplos endere√ßos
	if len(addresses) > 1 {
		// Verificar se j√° h√° um endere√ßo padr√£o definido
		var defaultAddress *models.Address
		for _, addr := range addresses {
			if addr.IsDefault {
				defaultAddress = &addr
				break
			}
		}

		// Se j√° h√° um endere√ßo padr√£o, mostrar para confirma√ß√£o antes de finalizar
		if defaultAddress != nil {
			addressText := formatAddressForDisplay(*defaultAddress)
			return fmt.Sprintf("%s\n\nüì¶ **Confirme o endere√ßo de entrega:**\n\nüìç **Endere√ßo padr√£o:**\n%s\n\n‚úÖ **Este endere√ßo est√° correto para a entrega?**\n\nüí¨ Responda:\nüü¢ **'sim'** ou **'confirmar'** - para finalizar o pedido\nüîÑ **'n√£o'** ou **'alterar'** - para escolher outro endere√ßo\nüìù **'editar endere√ßo'** - para modificar este endere√ßo", cartMessage, addressText), nil
		}

		// Se n√£o h√° endere√ßo padr√£o, mostrar lista para sele√ß√£o
		addressesText := formatAddressesForSelection(addresses)
		return fmt.Sprintf("%s\n\n%s\n\n‚úÖ **Qual endere√ßo deseja usar para esta entrega?**\n\nüí¨ Responda com o n√∫mero do endere√ßo ou 'confirmar' para usar o padr√£o.", cartMessage, addressesText), nil
	}

	// Se tem apenas um endere√ßo, mostrar para confirma√ß√£o
	if len(addresses) == 1 {
		defaultAddress := addresses[0]

		// Verificar se o endere√ßo est√° completo
		if !isAddressComplete(defaultAddress) {
			addressText := formatAddressForDisplay(defaultAddress)
			return fmt.Sprintf("%s\n\nüìã **Endere√ßo cadastrado:**\n%s\n\n‚ö†Ô∏è **Endere√ßo incompleto!** Algumas informa√ß√µes est√£o faltando.\n\nüè† **Por favor, informe seu endere√ßo completo:**\n\nüí° **Exemplo:** Rua das Flores, 123, Centro, Bras√≠lia, DF, CEP 70000-000, Complemento (se houver)", cartMessage, addressText), nil
		}

		// üö® CORRE√á√ÉO: Mostrar carrinho junto com o endere√ßo para confirma√ß√£o antes de finalizar
		addressText := formatAddressForDisplay(defaultAddress)
		return fmt.Sprintf("%s\n\nüì¶ **Confirme o endere√ßo de entrega:**\n\nüìç **Endere√ßo cadastrado:**\n%s\n\n‚úÖ **Este endere√ßo est√° correto para a entrega?**\n\nüí¨ Responda:\nüü¢ **'sim'** ou **'confirmar'** - para finalizar o pedido\nüîÑ **'n√£o'** ou **'alterar'** - para cadastrar outro endere√ßo\nüìù **'editar endere√ßo'** - para modificar este endere√ßo", cartMessage, addressText), nil
	}

	return "‚ùå Erro inesperado no checkout.", nil
}

func (s *AIService) handleCancelarPedido(tenantID uuid.UUID, args map[string]interface{}) (string, error) {
	orderIDStr, ok := args["order_id"].(string)
	if !ok {
		return "‚ùå ID do pedido √© obrigat√≥rio.", nil
	}

	log.Info().
		Str("tenant_id", tenantID.String()).
		Str("order_id_str", orderIDStr).
		Msg("üîç Tentando cancelar pedido")

	// Tentar encontrar o pedido por diferentes m√©todos
	var orderID uuid.UUID
	var err error

	// Primeiro tentar como UUID direto (compatibilidade com c√≥digo antigo)
	orderID, err = uuid.Parse(orderIDStr)
	if err != nil {
		log.Info().
			Str("order_id_str", orderIDStr).
			Msg("üîç N√£o √© UUID, tentando buscar na mem√≥ria")

		// Se n√£o for UUID, tentar encontrar na mem√≥ria por n√∫mero sequencial
		customerID, exists := args["customer_id"]
		if exists {
			customerIDStr, ok := customerID.(string)
			if ok {
				log.Info().
					Str("customer_id", customerIDStr).
					Msg("üîç Buscando na mem√≥ria do cliente")

				// Buscar na mem√≥ria os pedidos armazenados
				ordersListData, found := s.memoryManager.GetTempData(tenantID, customerIDStr, "orders_list")
				if found {
					log.Info().Msg("üîç Dados encontrados na mem√≥ria")
					ordersList, ok := ordersListData.([]map[string]interface{})
					if ok {
						log.Info().
							Int("orders_count", len(ordersList)).
							Msg("üîç Lista de pedidos recuperada")

						// Tentar encontrar por n√∫mero sequencial
						sequentialNum := orderIDStr
						for _, orderData := range ordersList {
							if sequential, seqOk := orderData["sequential"].(int); seqOk {
								if fmt.Sprintf("%d", sequential) == sequentialNum {
									if idStr, idOk := orderData["id"].(string); idOk {
										if parsedUUID, parseUUIDErr := uuid.Parse(idStr); parseUUIDErr == nil {
											orderID = parsedUUID
											log.Info().
												Str("found_uuid", orderID.String()).
												Msg("‚úÖ Pedido encontrado por n√∫mero sequencial")
											goto foundOrder
										}
									}
								}
							}
						}

						// Tentar encontrar por c√≥digo do pedido
						for _, orderData := range ordersList {
							if orderNumber, numOk := orderData["number"].(string); numOk {
								if orderNumber == orderIDStr {
									if idStr, idOk := orderData["id"].(string); idOk {
										if parsedUUID, parseUUIDErr := uuid.Parse(idStr); parseUUIDErr == nil {
											orderID = parsedUUID
											log.Info().
												Str("found_uuid", orderID.String()).
												Msg("‚úÖ Pedido encontrado por c√≥digo")
											goto foundOrder
										}
									}
								}
							}
						}
					}
				} else {
					log.Warn().Msg("‚ùå Dados n√£o encontrados na mem√≥ria")
				}
			}
		}

		// Se chegou at√© aqui, n√£o encontrou o pedido
		log.Warn().
			Str("order_id_str", orderIDStr).
			Msg("‚ùå Pedido n√£o encontrado em nenhum m√©todo")
		return "‚ùå Pedido n√£o encontrado. Use 'hist√≥rico de pedidos' primeiro e depois 'cancelar pedido [n√∫mero]'.", nil
	}

foundOrder:
	log.Info().
		Str("order_uuid", orderID.String()).
		Msg("üîÑ Tentando cancelar pedido")

	err = s.orderService.CancelOrder(tenantID, orderID)
	if err != nil {
		log.Error().
			Err(err).
			Str("order_uuid", orderID.String()).
			Msg("‚ùå Erro ao cancelar pedido")
		return "‚ùå Erro ao cancelar pedido.", err
	}

	log.Info().
		Str("order_uuid", orderID.String()).
		Msg("‚úÖ Pedido cancelado com sucesso")

	return "‚úÖ Pedido cancelado com sucesso!\n\nüõçÔ∏è Voc√™ pode fazer um novo pedido quando quiser.", nil
}

func (s *AIService) handleHistoricoPedidos(tenantID, customerID uuid.UUID) (string, error) {
	orders, err := s.orderService.GetOrdersByCustomer(tenantID, customerID)
	if err != nil {
		return "‚ùå Erro ao buscar hist√≥rico de pedidos.", err
	}

	if len(orders) == 0 {
		return "üìù Voc√™ ainda n√£o tem pedidos.\n\nüõçÔ∏è Que tal fazer seu primeiro pedido?", nil
	}

	result := "üìã **Hist√≥rico de Pedidos:**\n\n"

	// Preparar dados para mem√≥ria sequencial
	memoryData := make(map[string]interface{})
	ordersList := make([]map[string]interface{}, 0)

	for i, order := range orders {
		if i >= 10 { // Limitar a 10 pedidos mais recentes
			break
		}

		statusEmoji := getStatusEmoji(order.Status)
		result += fmt.Sprintf("%d. **Pedido %s** %s\n", i+1, order.OrderNumber, statusEmoji)
		result += fmt.Sprintf("   üí∞ Total: R$ %s\n", formatCurrency(order.TotalAmount))
		result += fmt.Sprintf("   üìÖ Data: %s\n", order.CreatedAt.Format("02/01/2006"))

		// Adicionar status sempre
		statusText := "Pendente"
		switch order.Status {
		case "pending":
			statusText = "Pendente"
		case "confirmed":
			statusText = "Confirmado"
		case "processing":
			statusText = "Processando"
		case "shipped":
			statusText = "Enviado"
		case "delivered":
			statusText = "Entregue"
		case "cancelled":
			statusText = "Cancelado"
		default:
			statusText = order.Status
		}
		result += fmt.Sprintf("   üì¶ Status: %s\n", statusText)

		// Buscar quantidade de itens do pedido se dispon√≠vel
		// Por agora, adicionaremos informa√ß√£o gen√©rica
		result += "   üìã Itens: Ver detalhes do pedido\n"

		// Adicionar informa√ß√£o de cancelamento apenas para pedidos pendentes
		if order.Status == "pending" {
			result += "   ‚ö†Ô∏è Pode ser cancelado\n"
		}
		result += "\n"

		// Adicionar √† lista para mem√≥ria sequencial
		orderData := map[string]interface{}{
			"id":         order.ID.String(),
			"number":     order.OrderNumber,
			"sequential": i + 1,
			"status":     order.Status,
			"total":      formatCurrency(order.TotalAmount),
			"created_at": order.CreatedAt.Format("02/01/2006"),
		}
		ordersList = append(ordersList, orderData)
	}

	// Armazenar na mem√≥ria para permitir cancelamento por n√∫mero
	memoryData["orders_list"] = ordersList
	memoryData["context"] = "historic_orders"
	s.memoryManager.StoreTempData(tenantID, customerID.String(), memoryData)

	result += "üí° Para cancelar um pedido pendente, use: 'cancelar pedido [n√∫mero]' ou 'cancelar pedido [c√≥digo]'"

	return result, nil
}

// handleSelecionarFormaPagamento registra a forma de pagamento escolhida pelo cliente
func (s *AIService) handleSelecionarFormaPagamento(tenantID, customerID uuid.UUID, args map[string]interface{}) (string, error) {
	var paymentMethodID uuid.UUID
	var paymentMethodName string

	// Tentar obter ID ou nome do m√©todo de pagamento
	if paymentMethodIDStr, ok := args["payment_method_id"].(string); ok && paymentMethodIDStr != "" {
		// Tentar como UUID primeiro
		if id, err := uuid.Parse(paymentMethodIDStr); err == nil {
			paymentMethodID = id
		} else {
			// Se n√£o for UUID, tratar como nome
			paymentMethodName = paymentMethodIDStr
		}
	}

	// Se foi passado nome, buscar ID pelo nome
	if paymentMethodName != "" || (paymentMethodID == uuid.Nil) {
		if paymentMethodName == "" {
			paymentMethodName, _ = args["payment_method_name"].(string)
		}

		// Buscar forma de pagamento pelo nome
		paymentOptions, err := s.orderService.GetPaymentOptions(tenantID)
		if err != nil {
			return "‚ùå Erro ao buscar formas de pagamento.", err
		}

		// Buscar por nome (case insensitive)
		found := false
		searchName := strings.ToLower(strings.TrimSpace(paymentMethodName))
		for _, option := range paymentOptions {
			if strings.ToLower(option.Name) == searchName || strings.Contains(strings.ToLower(option.Name), searchName) {
				paymentMethodID, _ = uuid.Parse(option.ID)
				paymentMethodName = option.Name
				found = true
				break
			}
		}

		if !found {
			return fmt.Sprintf("‚ùå Forma de pagamento '%s' n√£o encontrada. Formas dispon√≠veis: %v",
				paymentMethodName,
				func() []string {
					names := make([]string, len(paymentOptions))
					for i, opt := range paymentOptions {
						names[i] = opt.Name
					}
					return names
				}()), nil
		}
	}

	if paymentMethodID == uuid.Nil {
		return "‚ùå Erro: Forma de pagamento n√£o informada.", fmt.Errorf("payment_method not provided")
	}

	// Buscar o carrinho ativo do cliente
	activeCart, err := s.cartService.GetOrCreateActiveCart(tenantID, customerID)
	if err != nil {
		return "‚ùå Erro ao acessar carrinho.", err
	}

	cart, err := s.cartService.GetCartWithItems(activeCart.ID, tenantID)
	if err != nil {
		return "‚ùå Voc√™ ainda n√£o tem produtos no carrinho. Adicione produtos antes de selecionar o pagamento.", err
	}

	// Atualizar o m√©todo de pagamento no carrinho
	err = s.cartService.UpdateCartPaymentMethod(cart.ID, tenantID, paymentMethodID)
	if err != nil {
		return "‚ùå Erro ao registrar a forma de pagamento. Tente novamente.", err
	}

	// Verificar se precisa de troco
	needsChange, _ := args["needs_change"].(bool)
	changeForAmount, _ := args["change_for_amount"].(string)
	observations, _ := args["observations"].(string)

	// Se precisa de troco, atualizar observa√ß√µes
	if needsChange && changeForAmount != "" {
		err = s.cartService.UpdateCartObservations(cart.ID, tenantID, observations, changeForAmount)
		if err != nil {
			log.Warn().Err(err).Msg("Erro ao salvar observa√ß√µes de troco")
		}
	}

	// Buscar informa√ß√µes do m√©todo de pagamento para confirmar (se ainda n√£o temos o nome)
	if paymentMethodName == "" {
		paymentOptions2, err := s.orderService.GetPaymentOptions(tenantID)
		if err != nil {
			return "‚úÖ Forma de pagamento registrada com sucesso!", nil
		}

		for _, option := range paymentOptions2 {
			if option.ID == paymentMethodID.String() {
				paymentMethodName = option.Name
				break
			}
		}
	}

	if paymentMethodName == "" {
		paymentMethodName = "Forma de pagamento selecionada"
	}

	result := fmt.Sprintf("‚úÖ **Forma de pagamento registrada:**\n\nüí≥ %s\n", paymentMethodName)

	if needsChange && changeForAmount != "" {
		result += fmt.Sprintf("\nüíµ Troco para: R$ %s\n", changeForAmount)
	}

	if observations != "" {
		result += fmt.Sprintf("\nüìù Observa√ß√£o: %s\n", observations)
	}

	result += "\n‚ú® Agora voc√™ pode finalizar seu pedido! Digite 'finalizar pedido' ou 'checkout' quando estiver pronto."

	return result, nil
}

// handleTrocarFormaPagamento permite alterar a forma de pagamento j√° selecionada
func (s *AIService) handleTrocarFormaPagamento(tenantID, customerID uuid.UUID, args map[string]interface{}) (string, error) {
	// Reutiliza a mesma l√≥gica de sele√ß√£o
	return s.handleSelecionarFormaPagamento(tenantID, customerID, args)
}

func (s *AIService) handleAtualizarCadastro(tenantID, customerID uuid.UUID, customerPhone string, args map[string]interface{}) (string, error) {
	var updates CustomerUpdateData
	var updatedFields []string

	log.Info().
		Interface("args", args).
		Msg("üîç DEBUG: handleAtualizarCadastro received args")

	if nome, ok := args["nome"].(string); ok && nome != "" {
		updates.Name = nome
		updatedFields = append(updatedFields, "nome")
		log.Info().
			Str("nome", nome).
			Msg("üè∑Ô∏è DEBUG: Name parameter received")
	}

	if email, ok := args["email"].(string); ok && email != "" {
		updates.Email = email
		updatedFields = append(updatedFields, "email")
	}

	if endereco, ok := args["endereco"].(string); ok && endereco != "" {
		// Verificar se √© uma confirma√ß√£o de endere√ßo
		lowerEndereco := strings.ToLower(strings.TrimSpace(endereco))

		// Detectar solicita√ß√£o de novo endere√ßo
		if strings.Contains(lowerEndereco, "novo") && strings.Contains(lowerEndereco, "endere√ßo") ||
			strings.Contains(lowerEndereco, "novo") && strings.Contains(lowerEndereco, "endereco") ||
			lowerEndereco == "novo endere√ßo" || lowerEndereco == "novo endereco" {
			return "üè† **Para cadastrar um novo endere√ßo, informe o endere√ßo completo:**\n\nüí° **Exemplo:** Rua das Flores, 123, Centro, Bras√≠lia, DF, CEP 70000-000, Complemento (se houver)\n\nüìç **Ou use 'gerenciar endere√ßos' para ver op√ß√µes.**", nil
		}

		// Detectar confirma√ß√µes simples
		if lowerEndereco == "sim" || lowerEndereco == "confirmo" || lowerEndereco == "ok" || lowerEndereco == "confirmar" || lowerEndereco == "confirma" ||
			lowerEndereco == "finalizar" || lowerEndereco == "fechar" || lowerEndereco == "concluir" || lowerEndereco == "prosseguir" || lowerEndereco == "continuar" {
			// Cliente confirmou o endere√ßo existente, prosseguir com checkout final
			response := "‚úÖ **Endere√ßo confirmado!**\n\nüéØ Prosseguindo com o pedido...\n\n"

			checkoutResult, checkoutErr := s.performFinalCheckout(tenantID, customerID, customerPhone)
			if checkoutErr == nil {
				response += checkoutResult
				return response, nil
			} else {
				response += "‚ùå Erro ao finalizar pedido: " + checkoutErr.Error()
				return response, checkoutErr
			}
		}

		// Detectar sele√ß√£o de endere√ßo por n√∫mero (ex: "usar endere√ßo 2", "endere√ßo 1", "2")
		// Mas n√£o deve capturar endere√ßos completos com rua, n√∫mero, etc.
		// Verifica se √© um endere√ßo completo primeiro
		isCompleteAddress := strings.Contains(lowerEndereco, ",") ||
			strings.Contains(lowerEndereco, "rua") ||
			strings.Contains(lowerEndereco, "avenida") ||
			strings.Contains(lowerEndereco, " av ") ||
			strings.Contains(lowerEndereco, "alameda") ||
			strings.Contains(lowerEndereco, "cep") ||
			len(strings.Fields(endereco)) > 3 // Endere√ßo completo tem muitas palavras

		if !isCompleteAddress {
			addressNumberPattern := regexp.MustCompile(`(?i)^(?:usar\s+)?(?:endere[√ßc]o\s+)?(\d+)$`)
			if matches := addressNumberPattern.FindStringSubmatch(endereco); len(matches) > 1 {
				addressNum, err := strconv.Atoi(matches[1])
				if err == nil && addressNum > 0 {
					// Buscar endere√ßos do cliente
					addresses, err := s.addressService.GetAddressesByCustomer(tenantID, customerID)
					if err != nil {
						return "‚ùå Erro ao buscar endere√ßos.", err
					}

					if addressNum <= len(addresses) {
						selectedAddress := addresses[addressNum-1]

						// Definir este endere√ßo como padr√£o
						err := s.addressService.SetDefaultAddress(tenantID, customerID, selectedAddress.ID)
						if err != nil {
							return "‚ùå Erro ao definir endere√ßo padr√£o.", err
						}

						response := fmt.Sprintf("‚úÖ **Endere√ßo %d selecionado como padr√£o!**\n\nüìã **Endere√ßo de entrega:**\n%s\n\nüéØ Prosseguindo com o pedido...\n\n",
							addressNum, formatAddressForDisplay(selectedAddress))

						checkoutResult, checkoutErr := s.performFinalCheckout(tenantID, customerID, customerPhone)
						if checkoutErr == nil {
							response += checkoutResult
							return response, nil
						} else {
							response += "‚ùå Erro ao finalizar pedido: " + checkoutErr.Error()
							return response, checkoutErr
						}
					} else {
						return fmt.Sprintf("‚ùå Endere√ßo %d n√£o encontrado. Voc√™ tem apenas %d endere√ßos cadastrados.", addressNum, len(addresses)), nil
					}
				}
			}
		}

		// Detectar comando para apagar endere√ßo
		if strings.Contains(lowerEndereco, "apagar") || strings.Contains(lowerEndereco, "deletar") || strings.Contains(lowerEndereco, "delete") || strings.Contains(lowerEndereco, "remover") {
			// Detectar se quer apagar todos
			if strings.Contains(lowerEndereco, "todos") || strings.Contains(lowerEndereco, "tudo") {
				err := s.addressService.DeleteAllAddresses(tenantID, customerID)
				if err != nil {
					return "‚ùå Erro ao deletar endere√ßos.", err
				}
				return "‚úÖ **Todos os endere√ßos foram deletados!**\n\nüè† **Para adicionar um novo endere√ßo, informe:**\nÔøΩ **Exemplo:** Rua das Flores, 123, Centro, Bras√≠lia, DF, CEP 70000-000", nil
			}

			// Detectar n√∫mero espec√≠fico para deletar
			deleteNumberPattern := regexp.MustCompile(`(?i)(?:apagar|deletar|delete|remover)\s+(?:endere[√ßc]o\s+)?(\d+)`)
			if matches := deleteNumberPattern.FindStringSubmatch(endereco); len(matches) > 1 {
				addressNum, err := strconv.Atoi(matches[1])
				if err == nil && addressNum > 0 {
					addresses, err := s.addressService.GetAddressesByCustomer(tenantID, customerID)
					if err != nil {
						return "‚ùå Erro ao buscar endere√ßos.", err
					}

					if addressNum <= len(addresses) {
						addressToDelete := addresses[addressNum-1]
						err := s.addressService.DeleteAddress(tenantID, customerID, addressToDelete.ID)
						if err != nil {
							return "‚ùå Erro ao deletar endere√ßo.", err
						}
						return fmt.Sprintf("‚úÖ **Endere√ßo %d deletado com sucesso!**\n\nüóëÔ∏è **Endere√ßo removido:**\n%s",
							addressNum, formatAddressForDisplay(addressToDelete)), nil
					} else {
						return fmt.Sprintf("‚ùå Endere√ßo %d n√£o encontrado. Voc√™ tem apenas %d endere√ßos cadastrados.", addressNum, len(addresses)), nil
					}
				}
			}

			return "üóëÔ∏è **Para remover um endere√ßo espec√≠fico:** 'deletar endere√ßo 1', 'apagar endere√ßo 2'\nüóëÔ∏è **Para remover todos:** 'deletar todos'\nüí° **Ou informe um novo endere√ßo completo.**", nil
		}

		// Detectar "novo endere√ßo" - solicita o endere√ßo
		if strings.Contains(lowerEndereco, "novo") && strings.Contains(lowerEndereco, "endere") {
			return "üè† **Por favor, informe seu novo endere√ßo completo:**\n\nüí° **Exemplo:** Rua das Flores, 123, Centro, Bras√≠lia, DF, CEP 70000-000, Complemento (se houver)", nil
		}

		// √â um novo endere√ßo, usar IA para extrair campos
		log.Info().
			Str("address_text", endereco).
			Msg("üß† Processing address with AI parsing")

		// Usar IA para extrair campos do endere√ßo
		ctx := context.Background()
		parsedAddress, err := s.parseAddressWithAI(ctx, endereco)
		if err != nil {
			log.Error().
				Err(err).
				Str("address_text", endereco).
				Msg("‚ùå Failed to parse address with AI, using fallback")

			// Fallback para parsing simples se IA falhar
			updates.Address = endereco
			updatedFields = append(updatedFields, "endere√ßo")
		} else {
			// Sucesso com IA - criar endere√ßo diretamente
			log.Info().
				Interface("parsed_address", parsedAddress).
				Msg("‚úÖ Address parsed successfully with AI")

			// Remover padr√£o de todos os endere√ßos existentes
			existingAddresses, err := s.addressService.GetAddressesByCustomer(tenantID, customerID)
			if err == nil && len(existingAddresses) > 0 {
				// Remove o padr√£o de todos os endere√ßos existentes
				for _, existingAddr := range existingAddresses {
					if existingAddr.IsDefault {
						s.addressService.SetDefaultAddress(tenantID, customerID, uuid.Nil) // Remove default
						break
					}
				}
			}

			// üèôÔ∏è VALIDA√á√ÉO DE CIDADE DESABILITADA TEMPORARIAMENTE
			// A valida√ß√£o ser√° implementada depois para evitar depend√™ncias circulares
			if parsedAddress.City == "" {
				// Se n√£o tem cidade, √© obrigat√≥rio informar
				return "‚ùå **Cidade obrigat√≥ria!**\n\nüèôÔ∏è Por favor, informe a cidade no seu endere√ßo.\n\nüìù Exemplo: 'Avenida Hugo Musso, 1333, Praia da Costa, Vila Velha, ES'", nil
			}

			// Criar novo endere√ßo com campos estruturados da IA
			address := &models.Address{
				CustomerID:   customerID,
				Street:       parsedAddress.Street,
				Number:       parsedAddress.Number,
				Complement:   parsedAddress.Complement,
				Neighborhood: parsedAddress.Neighborhood,
				City:         parsedAddress.City,
				State:        parsedAddress.State,
				ZipCode:      parsedAddress.ZipCode,
				Country:      "BR",
				IsDefault:    true,
			}

			err = s.addressService.CreateAddress(tenantID, address)
			if err != nil {
				log.Error().
					Err(err).
					Interface("address", address).
					Msg("‚ùå Failed to create address from AI parsing")
				return "‚ùå Erro ao salvar endere√ßo.", err
			}

			updatedFields = append(updatedFields, "endere√ßo")
			log.Info().
				Str("address_id", address.ID.String()).
				Msg("‚úÖ Address created successfully from AI parsing")
		}
	}

	if len(updatedFields) == 0 {
		return "‚ùå Nenhum dado v√°lido para atualizar.", nil
	}

	// Buscar dados do cliente para personaliza√ß√£o (ANTES da atualiza√ß√£o para compara√ß√£o)
	customer, err := s.customerService.GetCustomerByID(tenantID, customerID)
	if err != nil {
		// Se n√£o conseguir buscar, usar mensagem padr√£o
		customer = nil
	}

	// S√≥ atualizar perfil do cliente se houver campos que n√£o sejam endere√ßo processado pela IA
	if updates.Name != "" || updates.Email != "" || updates.Address != "" {
		err := s.customerService.UpdateCustomerProfile(tenantID, customerID, updates)
		if err != nil {
			return "‚ùå Erro ao atualizar cadastro.", err
		}
	}

	// Preparar primeiro nome do cliente para personaliza√ß√£o
	customerName := ""

	// Se temos um nome novo nos updates, usar esse
	if updates.Name != "" {
		names := strings.Fields(strings.TrimSpace(updates.Name))
		if len(names) > 0 {
			customerName = names[0]
		} else {
			customerName = "Cliente"
		}
		log.Info().
			Str("updates_name", updates.Name).
			Str("customer_name", customerName).
			Msg("üè∑Ô∏è Using name from updates")
	} else if customer != nil && customer.Name != "" {
		// Se n√£o h√° nome novo, usar o nome existente
		names := strings.Fields(strings.TrimSpace(customer.Name))
		if len(names) > 0 {
			customerName = names[0]
		} else {
			customerName = "Cliente"
		}
		log.Info().
			Str("existing_name", customer.Name).
			Str("customer_name", customerName).
			Msg("üè∑Ô∏è Using existing customer name")
	} else {
		customerName = "Cliente"
		log.Info().
			Msg("üè∑Ô∏è Using default 'Cliente' name")
	}

	// Tentar finalizar pedido automaticamente se dados est√£o completos
	if len(updatedFields) > 0 {
		// Tentar finalizar pedido diretamente
		checkoutResult, checkoutErr := s.performFinalCheckout(tenantID, customerID, customerPhone)
		if checkoutErr == nil {
			// Se finalizou com sucesso, mostrar mensagem de sucesso personalizada
			response := fmt.Sprintf("‚úÖ **%s**, seu cadastro foi atualizado com sucesso!\n\n", customerName)
			response += checkoutResult
			return response, nil
		} else {
			// Se ainda precisa de mais dados, criar mensagem personalizada
			response := fmt.Sprintf("‚úÖ **%s**, seu cadastro foi atualizado com sucesso!\n\n", customerName)

			// Verificar se precisa de endere√ßo especificamente
			if strings.Contains(checkoutErr.Error(), "endere√ßo") ||
				strings.Contains(checkoutErr.Error(), "address") ||
				strings.Contains(checkoutErr.Error(), "entrega") {
				response += "üìù Para finalizar o pedido, precisamos do seu endere√ßo de entrega.\n\n"
				response += "üè† Por favor, me informe seu endere√ßo completo:\n\n"
				response += "üí° **Exemplo:** Rua das Flores, 123, Centro, Bras√≠lia, DF, CEP 70000-000, Complemento (se houver)\n\n"
				return response, nil
			}

			// Se for outro tipo de erro, mostrar o carrinho
			cartResult, cartErr := s.handleCheckout(tenantID, customerID, customerPhone)
			if cartErr == nil {
				response += cartResult
			} else {
				response += "üí° Agora voc√™ pode tentar finalizar seu pedido novamente!"
			}
			return response, nil
		}
	}

	// Se chegou aqui, n√£o houve campos para atualizar ou erro inesperado
	return fmt.Sprintf("‚úÖ **%s**, seu cadastro foi atualizado com sucesso!", customerName), nil
}

func (s *AIService) handleGerenciarEnderecos(tenantID, customerID uuid.UUID, args map[string]interface{}) (string, error) {
	acao, ok := args["acao"].(string)
	if !ok {
		return "‚ùå A√ß√£o n√£o especificada.", nil
	}

	addresses, err := s.addressService.GetAddressesByCustomer(tenantID, customerID)
	if err != nil {
		return "‚ùå Erro ao buscar endere√ßos.", err
	}

	switch acao {
	case "listar":
		if len(addresses) == 0 {
			return "üìç **Nenhum endere√ßo cadastrado.**\n\nüè† **Para adicionar um endere√ßo, informe:**\n\nüí° **Exemplo:** Rua das Flores, 123, Centro, Bras√≠lia, DF, CEP 70000-000", nil
		}

		addressesText := formatAddressesForSelection(addresses)
		return fmt.Sprintf("%s\n\nüí° **Para usar um endere√ßo espec√≠fico, diga:** 'usar endere√ßo 2' ou 'endere√ßo 1'\nüè† **Para adicionar novo endere√ßo, apenas informe o endere√ßo completo.**\nüóëÔ∏è **Para deletar:** 'deletar endere√ßo 2' ou 'deletar todos'\n\n**Exemplo de endere√ßo completo:** Rua das Flores, 123, Centro, Bras√≠lia, DF, CEP 70000-000, Apto 101", addressesText), nil

	case "selecionar":
		numeroEndereco, ok := args["numero_endereco"].(float64)
		if !ok {
			return "‚ùå N√∫mero do endere√ßo n√£o especificado.", nil
		}

		addressNum := int(numeroEndereco)
		if addressNum < 1 || addressNum > len(addresses) {
			return fmt.Sprintf("‚ùå Endere√ßo %d n√£o encontrado. Voc√™ tem apenas %d endere√ßos cadastrados.", addressNum, len(addresses)), nil
		}

		selectedAddress := addresses[addressNum-1]

		// Definir este endere√ßo como padr√£o
		err := s.addressService.SetDefaultAddress(tenantID, customerID, selectedAddress.ID)
		if err != nil {
			return "‚ùå Erro ao definir endere√ßo padr√£o.", err
		}

		return fmt.Sprintf("‚úÖ **Endere√ßo %d selecionado como padr√£o!**\n\nüìã **Endere√ßo de entrega:**\n%s\n\nüõí **Agora voc√™ pode finalizar seu pedido.**",
			addressNum, formatAddressForDisplay(selectedAddress)), nil

	case "deletar":
		if len(addresses) == 0 {
			return "üìç **Nenhum endere√ßo para deletar.**", nil
		}

		numeroEndereco, ok := args["numero_endereco"].(float64)
		if !ok {
			return "‚ùå N√∫mero do endere√ßo n√£o especificado.", nil
		}

		addressNum := int(numeroEndereco)
		if addressNum < 1 || addressNum > len(addresses) {
			return fmt.Sprintf("‚ùå Endere√ßo %d n√£o encontrado. Voc√™ tem apenas %d endere√ßos cadastrados.", addressNum, len(addresses)), nil
		}

		addressToDelete := addresses[addressNum-1]
		err := s.addressService.DeleteAddress(tenantID, customerID, addressToDelete.ID)
		if err != nil {
			return "‚ùå Erro ao deletar endere√ßo.", err
		}

		return fmt.Sprintf("‚úÖ **Endere√ßo %d deletado com sucesso!**\n\nüóëÔ∏è **Endere√ßo removido:**\n%s",
			addressNum, formatAddressForDisplay(addressToDelete)), nil

	case "deletar_todos":
		if len(addresses) == 0 {
			return "üìç **Nenhum endere√ßo para deletar.**", nil
		}

		err := s.addressService.DeleteAllAddresses(tenantID, customerID)
		if err != nil {
			return "‚ùå Erro ao deletar endere√ßos.", err
		}

		return fmt.Sprintf("‚úÖ **Todos os %d endere√ßos foram deletados!**\n\nüè† **Para adicionar um novo endere√ßo, informe:**\nüí° **Exemplo:** Rua das Flores, 123, Centro, Bras√≠lia, DF, CEP 70000-000", len(addresses)), nil

	default:
		return "‚ùå A√ß√£o n√£o reconhecida. Use 'listar', 'selecionar', 'deletar' ou 'deletar_todos'.", nil
	}
}

func (s *AIService) handleCadastrarEndereco(tenantID, customerID uuid.UUID, args map[string]interface{}) (string, error) {
	// Parse endere√ßo completo se fornecido
	enderecoCompleto, hasCompleto := args["endereco_completo"].(string)

	// Criar o endere√ßo usando os campos individuais ou parseando o endere√ßo completo
	address := &models.Address{
		CustomerID: customerID,
		Country:    "BR", // Default
	}

	// Se foi fornecido endere√ßo completo, tenta parsear
	if hasCompleto && strings.TrimSpace(enderecoCompleto) != "" {
		// Parse do endere√ßo completo
		parts := strings.Split(enderecoCompleto, ",")
		if len(parts) >= 4 {
			// Formato esperado: "Rua, N√∫mero, Bairro, Cidade, Estado, CEP"
			address.Street = strings.TrimSpace(parts[0])
			address.Number = strings.TrimSpace(parts[1])
			address.Neighborhood = strings.TrimSpace(parts[2])
			cityName := strings.TrimSpace(parts[3])

			// Inicialmente aceita a cidade digitada
			address.City = cityName

			if len(parts) >= 5 {
				address.State = strings.TrimSpace(parts[4])

				// Validar se a cidade existe no banco de dados
				if s.municipioService != nil {
					exists, municipio, err := s.municipioService.ValidarCidade(cityName, address.State)
					if err == nil && exists && municipio != nil {
						// Usar o nome oficial da cidade do banco
						address.City = municipio.NomeCidade
					}
					// Se n√£o encontrou, mant√©m o que o usu√°rio digitou
				}
			}
			if len(parts) >= 6 {
				cep := strings.TrimSpace(parts[5])
				// Remove "CEP" prefix if present
				cep = strings.ReplaceAll(cep, "CEP", "")
				cep = strings.ReplaceAll(cep, ":", "")
				cep = strings.TrimSpace(cep)
				// Limpa o CEP deixando apenas n√∫meros
				address.ZipCode = cleanZipCode(cep)
			}
			// Se h√° mais partes, assume que √© complemento
			if len(parts) >= 7 {
				complement := strings.TrimSpace(parts[6])
				address.Complement = complement
			}
		} else {
			return "‚ùå **Formato de endere√ßo inv√°lido.**\n\nüí° **Use o formato:** Rua, N√∫mero, Bairro, Cidade, Estado, CEP\n\nüìã **Exemplo:** Av Hugo Musso, 2380, Itapua, Vila Velha, ES, 29101789", nil
		}
	} else {
		// Usar campos individuais
		if rua, ok := args["rua"].(string); ok {
			address.Street = rua
		}
		if numero, ok := args["numero"].(string); ok {
			address.Number = numero
		}
		if bairro, ok := args["bairro"].(string); ok {
			address.Neighborhood = bairro
		}
		if cidade, ok := args["cidade"].(string); ok {
			address.City = cidade
		}
		if estado, ok := args["estado"].(string); ok {
			address.State = estado
		}
		if cep, ok := args["cep"].(string); ok {
			address.ZipCode = cleanZipCode(cep)
		}
	}

	// Valida√ß√µes b√°sicas
	if address.Street == "" {
		return "‚ùå **Rua √© obrigat√≥ria.**\n\nüí° **Informe o endere√ßo completo:** Rua, N√∫mero, Bairro, Cidade, Estado, CEP, Complemento (se houver)", nil
	}
	if address.City == "" {
		return "‚ùå **Cidade √© obrigat√≥ria.**\n\nüí° **Informe o endere√ßo completo:** Rua, N√∫mero, Bairro, Cidade, Estado, CEP, Complemento (se houver)", nil
	}
	if address.State == "" {
		return "‚ùå **Estado √© obrigat√≥rio.**\n\nüí° **Informe o endere√ßo completo:** Rua, N√∫mero, Bairro, Cidade, Estado, CEP, Complemento (se houver)", nil
	}
	if address.ZipCode == "" {
		return "‚ùå **CEP √© obrigat√≥rio.**\n\nüí° **Informe o endere√ßo completo:** Rua, N√∫mero, Bairro, Cidade, Estado, CEP, Complemento (se houver)", nil
	}

	// Verificar se o cliente j√° tem endere√ßos
	existingAddresses, err := s.addressService.GetAddressesByCustomer(tenantID, customerID)
	if err != nil {
		return "‚ùå Erro ao verificar endere√ßos existentes.", err
	}

	// Se √© o primeiro endere√ßo, marcar como padr√£o
	if len(existingAddresses) == 0 {
		address.IsDefault = true
	}

	// Criar o endere√ßo
	err = s.addressService.CreateAddress(tenantID, address)
	if err != nil {
		return "‚ùå Erro ao cadastrar endere√ßo.", err
	}

	// Buscar endere√ßos atualizados para mostrar posi√ß√£o
	updatedAddresses, _ := s.addressService.GetAddressesByCustomer(tenantID, customerID)
	addressPosition := len(updatedAddresses)

	defaultText := ""
	if address.IsDefault {
		defaultText = " (padr√£o)"
	}

	return fmt.Sprintf("‚úÖ **Endere√ßo cadastrado com sucesso!**%s\n\nüìç **Endere√ßo %d:**\n%s\n\nüõí **Agora voc√™ pode finalizar seu pedido ou gerenciar seus endere√ßos.**",
		defaultText, addressPosition, formatAddressForDisplay(*address)), nil
}

// Fun√ß√µes auxiliares
func cleanZipCode(zipcode string) string {
	// Remove todos os caracteres n√£o num√©ricos
	cleaned := regexp.MustCompile(`\D`).ReplaceAllString(zipcode, "")

	// Limita a 8 d√≠gitos (formato brasileiro)
	if len(cleaned) > 8 {
		cleaned = cleaned[:8]
	}

	return cleaned
}

func getItemName(item models.CartItem) string {
	if item.ProductName != nil && *item.ProductName != "" {
		return *item.ProductName
	}
	if item.Product != nil {
		return item.Product.Name
	}
	return "Produto"
}

func getStatusEmoji(status string) string {
	switch status {
	case "pending":
		return "‚è≥"
	case "processing":
		return "‚öôÔ∏è"
	case "shipped":
		return "üöö"
	case "delivered":
		return "‚úÖ"
	case "cancelled":
		return "‚ùå"
	default:
		return "üì¶"
	}
}

func (s *AIService) handleBuscarMultiplosProdutos(tenantID, customerID uuid.UUID, customerPhone string, args map[string]interface{}) (string, error) {
	produtosInterface, ok := args["produtos"].([]interface{})
	if !ok {
		return "‚ùå Lista de produtos √© obrigat√≥ria.", nil
	}

	// Convert interface slice to string slice
	var produtos []string
	for _, p := range produtosInterface {
		if produto, ok := p.(string); ok {
			produtos = append(produtos, produto)
		}
	}

	if len(produtos) == 0 {
		return "‚ùå Pelo menos um produto deve ser especificado.", nil
	}

	quantidadeFloat := 1.0
	if q, ok := args["quantidade"].(float64); ok {
		quantidadeFloat = q
	}
	quantidade := int(quantidadeFloat)

	if quantidade <= 0 {
		return "‚ùå Quantidade deve ser maior que zero.", nil
	}

	// Clear existing product list to start fresh
	s.memoryManager.StoreProductList(tenantID, customerPhone, []models.Product{})

	result := fmt.Sprintf("üîç Busquei %d produtos para voc√™:\n\n", len(produtos))
	totalFound := 0

	for i, nomeProduto := range produtos {
		// Search for each product
		searchResults, err := s.productService.SearchProducts(tenantID, nomeProduto, 5)
		if err != nil {
			result += fmt.Sprintf("%d. ‚ùå Erro ao buscar '%s'\n\n", i+1, nomeProduto)
			continue
		}

		if len(searchResults) == 0 {
			result += fmt.Sprintf("%d. ‚ùå Nenhum produto encontrado para '%s'\n\n", i+1, nomeProduto)
			continue
		}

		// Add products to memory with sequential numbering
		productRefs := s.memoryManager.AppendProductList(tenantID, customerPhone, searchResults)

		// Fix grammar: use "op√ß√£o" for 1, "op√ß√µes" for multiple
		opcaoOuOpcoes := "op√ß√£o"
		if len(searchResults) > 1 {
			opcaoOuOpcoes = "op√ß√µes"
		}

		result += fmt.Sprintf("%d. üîç **%s** (%d %s):\n", i+1, nomeProduto, len(searchResults), opcaoOuOpcoes)
		for _, ref := range productRefs {
			var price string
			if ref.SalePrice != "" && ref.SalePrice != "0" {
				price = fmt.Sprintf("~~R$ %s~~ **R$ %s**", formatCurrency(ref.Price), formatCurrency(ref.SalePrice))
			} else {
				price = fmt.Sprintf("**R$ %s**", formatCurrency(ref.Price))
			}
			result += fmt.Sprintf("   %d. **%s**\n", ref.SequentialID, ref.Name)
			result += fmt.Sprintf("      üí∞ %s\n", price)
		}
		result += "\n"
		totalFound += len(searchResults)
	}

	if totalFound > 0 {
		result += fmt.Sprintf("üõí Para adicionar, diga: 'adicionar [n√∫mero] quantidade %d'", quantidade)
	} else {
		result += "üí° Tente usar termos mais espec√≠ficos ou consulte nosso cat√°logo com 'produtos'"
	}

	return result, nil
}

func (s *AIService) handleAdicionarMaisItemCarrinho(tenantID, customerID uuid.UUID, args map[string]interface{}) (string, error) {
	produtoNome, ok := args["produto_nome"].(string)
	if !ok {
		return "‚ùå Nome do produto √© obrigat√≥rio.", nil
	}

	quantidadeFloat, ok := args["quantidade_adicional"].(float64)
	if !ok {
		return "‚ùå Quantidade adicional √© obrigat√≥ria.", nil
	}
	quantidadeAdicional := int(quantidadeFloat)

	if quantidadeAdicional <= 0 {
		return "‚ùå Quantidade deve ser maior que zero.", nil
	}

	// Get current cart items
	cart, err := s.cartService.GetOrCreateActiveCart(tenantID, customerID)
	if err != nil {
		return "‚ùå Erro ao acessar carrinho.", err
	}

	cartWithItems, err := s.cartService.GetCartWithItems(cart.ID, tenantID)
	if err != nil {
		return "‚ùå Erro ao carregar itens do carrinho.", err
	}

	if len(cartWithItems.Items) == 0 {
		return "üõí Seu carrinho est√° vazio. Use 'produtos' para ver nosso cat√°logo.", nil
	}

	// Find matching item in cart (case insensitive partial match)
	var foundItem *models.CartItem

	produtoNomeLower := strings.ToLower(produtoNome)
	for _, item := range cartWithItems.Items {
		itemNameLower := strings.ToLower(getItemName(item))
		if strings.Contains(itemNameLower, produtoNomeLower) {
			foundItem = &item
			break
		}
	}

	if foundItem == nil {
		return fmt.Sprintf("‚ùå N√£o encontrei '%s' no seu carrinho.\n\nüõí Use 'ver carrinho' para conferir os itens.", produtoNome), nil
	}

	// Update quantity (current + additional)
	novaQuantidade := foundItem.Quantity + quantidadeAdicional

	err = s.cartService.UpdateCartItemQuantity(cart.ID, tenantID, foundItem.ID, novaQuantidade)
	if err != nil {
		return "‚ùå Erro ao atualizar quantidade do item.", err
	}

	return fmt.Sprintf("‚úÖ **%s** - adicionadas mais %d unidades!\nüì¶ Nova quantidade: %d unidades",
		getItemName(*foundItem), quantidadeAdicional, novaQuantidade), nil
}

func (s *AIService) handleAdicionarPorNumero(tenantID, customerID uuid.UUID, customerPhone string, args map[string]interface{}) (string, error) {
	numeroFloat, ok := args["numero"].(float64)
	if !ok {
		return "‚ùå N√∫mero do produto √© obrigat√≥rio.", nil
	}
	numero := int(numeroFloat)

	quantidadeFloat := 1.0
	if q, ok := args["quantidade"].(float64); ok {
		quantidadeFloat = q
	}
	quantidade := int(quantidadeFloat)

	if quantidade <= 0 {
		return "‚ùå Quantidade deve ser maior que zero.", nil
	}

	// Get product from memory by sequential ID
	productRef := s.memoryManager.GetProductBySequentialID(tenantID, customerPhone, numero)
	if productRef == nil {
		return "‚ùå Produto n√£o encontrado. Use 'produtos' para ver a lista atualizada.", nil
	}

	// Get full product details
	product, err := s.productService.GetProductByID(tenantID, productRef.ProductID)
	if err != nil || product == nil {
		return "‚ùå Produto n√£o encontrado.", err
	}

	if product.StockQuantity < quantidade {
		return fmt.Sprintf("‚ùå Estoque insuficiente. Dispon√≠vel: %d unidades.", product.StockQuantity), nil
	}

	// Get or create cart
	cart, err := s.cartService.GetOrCreateActiveCart(tenantID, customerID)
	if err != nil {
		return "‚ùå Erro ao acessar carrinho.", err
	}

	// Add item to cart
	err = s.cartService.AddItemToCart(cart.ID, tenantID, product.ID, quantidade)
	if err != nil {
		return "‚ùå Erro ao adicionar item ao carrinho.", err
	}

	adicional := "\n\nVoc√™ pode continuar comprando ou digite 'finalizar' para fechar o pedido."
	return fmt.Sprintf("‚úÖ **%s** adicionado ao carrinho!\nüî¢ Quantidade: %d\nüí∞ Valor: R$ %s",
		product.Name, quantidade, formatCurrency(getEffectivePrice(product))) + adicional, nil
}

// getCartItemByNumber gets cart item by its position number (1-based)
func (s *AIService) getCartItemByNumber(tenantID, customerID uuid.UUID, itemNumber int) (*models.CartItem, error) {
	cart, err := s.cartService.GetOrCreateActiveCart(tenantID, customerID)
	if err != nil {
		return nil, err
	}

	cartWithItems, err := s.cartService.GetCartWithItems(cart.ID, tenantID)
	if err != nil {
		return nil, err
	}

	if itemNumber < 1 || itemNumber > len(cartWithItems.Items) {
		return nil, fmt.Errorf("item number %d not found", itemNumber)
	}

	return &cartWithItems.Items[itemNumber-1], nil
}

// generateDynamicSearchSuggestions gera sugest√µes alternativas baseadas nos produtos reais do tenant
func (s *AIService) generateDynamicSearchSuggestions(tenantID uuid.UUID, query, marca, tags string) []string {
	suggestions := []string{}

	// Buscar produtos populares para an√°lise
	products, err := s.productService.SearchProductsAdvanced(tenantID, ProductSearchFilters{
		Query: "",
		Limit: 50, // Buscar um sample dos produtos para an√°lise
	})

	if err == nil && len(products) > 0 {
		// Analisar tags mais comuns
		tagFrequency := make(map[string]int)
		brandFrequency := make(map[string]int)
		wordFrequency := make(map[string]int)

		for _, product := range products {
			// Analisar tags
			if product.Tags != "" {
				tags := strings.Split(product.Tags, ",")
				for _, tag := range tags {
					tag = strings.TrimSpace(tag)
					if tag != "" && len(tag) > 2 {
						tagFrequency[tag]++
					}
				}
			}

			// Analisar marcas
			if product.Brand != "" {
				brandFrequency[product.Brand]++
			}

			// Analisar palavras-chave no nome do produto
			words := strings.Fields(strings.ToLower(product.Name))
			for _, word := range words {
				if len(word) > 3 && !isStopWord(word) && !isNumber(word) {
					wordFrequency[word]++
				}
			}
		}

		// Coletar as tags mais populares
		for tag, count := range tagFrequency {
			if count >= 2 && len(suggestions) < 3 {
				if !containsSimilar(suggestions, tag) && !isSimilarToQuery(query, tag) {
					suggestions = append(suggestions, tag)
				}
			}
		}

		// Se n√£o temos sugest√µes suficientes, adicionar palavras-chave populares
		if len(suggestions) < 3 {
			for word, count := range wordFrequency {
				if count >= 3 && len(suggestions) < 3 {
					if !containsSimilar(suggestions, word) && !isSimilarToQuery(query, word) {
						suggestions = append(suggestions, word)
					}
				}
			}
		}

		// Se ainda n√£o temos sugest√µes suficientes, adicionar marcas populares
		if len(suggestions) < 3 {
			for brand, count := range brandFrequency {
				if count >= 2 && len(suggestions) < 3 {
					if !containsSimilar(suggestions, brand) && !isSimilarToQuery(query, brand) {
						suggestions = append(suggestions, brand)
					}
				}
			}
		}
	}

	// Se ainda n√£o temos sugest√µes, usar fallback baseado no tipo de neg√≥cio
	if len(suggestions) == 0 && len(products) > 0 {
		businessType := s.detectBusinessType(products)
		suggestions = s.getDefaultSuggestionsByBusinessType(businessType)
	}

	// Fallback final se n√£o conseguimos detectar nada
	if len(suggestions) == 0 {
		suggestions = []string{"produtos em destaque", "ofertas", "novidades"}
	}

	// Limitar a 3 sugest√µes
	if len(suggestions) > 3 {
		suggestions = suggestions[:3]
	}

	return suggestions
}

// isStopWord verifica se uma palavra √© uma stop word comum
func isStopWord(word string) bool {
	stopWords := map[string]bool{
		"para": true, "com": true, "sem": true, "por": true, "mais": true, "menos": true,
		"super": true, "mega": true, "kit": true, "pack": true, "unidade": true, "un": true,
		"und": true, "cx": true, "pct": true, "conjunto": true, "set": true,
	}
	return stopWords[word]
}

// isNumber verifica se uma string √© principalmente num√©rica
func isNumber(word string) bool {
	matched, _ := regexp.MatchString(`^\d+[a-z]*$|^[a-z]*\d+$`, word)
	return matched
}

// containsSimilar verifica se j√° existe uma sugest√£o similar na lista
func containsSimilar(suggestions []string, newSuggestion string) bool {
	for _, existing := range suggestions {
		if strings.Contains(strings.ToLower(existing), strings.ToLower(newSuggestion)) ||
			strings.Contains(strings.ToLower(newSuggestion), strings.ToLower(existing)) {
			return true
		}
	}
	return false
}

// isSimilarToQuery verifica se a sugest√£o √© muito similar √† query original
func isSimilarToQuery(query, suggestion string) bool {
	queryLower := strings.ToLower(query)
	suggestionLower := strings.ToLower(suggestion)

	return strings.Contains(queryLower, suggestionLower) ||
		strings.Contains(suggestionLower, queryLower)
}

// detectBusinessType detecta o tipo de neg√≥cio baseado nos produtos
func (s *AIService) detectBusinessType(products []models.Product) string {
	// Usar an√°lise dos produtos reais ao inv√©s de keywords fixas
	if len(products) == 0 {
		return "geral"
	}

	// An√°lise baseada no cat√°logo real do tenant
	productCount := len(products)
	if productCount < 10 {
		return "pequeno_comercio"
	} else if productCount < 100 {
		return "comercio_medio"
	} else {
		return "grande_comercio"
	}
}

// formatAddressForDisplay formata um endere√ßo para exibi√ß√£o
func formatAddressForDisplay(address models.Address) string {
	var parts []string

	if address.Street != "" {
		streetPart := address.Street
		if address.Number != "" {
			streetPart += ", " + address.Number
		}
		if address.Complement != "" {
			streetPart += " - " + address.Complement
		}
		parts = append(parts, streetPart)
	}

	if address.Neighborhood != "" {
		parts = append(parts, address.Neighborhood)
	}

	if address.City != "" {
		cityPart := address.City
		if address.State != "" {
			cityPart += ", " + address.State
		}
		parts = append(parts, cityPart)
	} else {
		// Se n√£o tem cidade, tentar identificar usando o banco de munic√≠pios
		cityIdentified := false

		// Se temos CEP, tentar buscar a cidade no banco
		if address.ZipCode != "" && len(address.ZipCode) >= 8 {
			// Usar Google Maps ou servi√ßo de CEP para identificar cidade
			// Por enquanto, apenas mostrar que vamos tentar identificar
		}

		// Se temos bairro e estado, tentar buscar cidade similar
		if !cityIdentified && address.Neighborhood != "" && address.State != "" {
			// Buscar no banco de munic√≠pios por similaridade
			// Por enquanto, n√£o assumir nada
		}

		// Se ainda n√£o identificamos, perguntar para o usu√°rio
		if !cityIdentified {
			if address.State != "" {
				parts = append(parts, "Cidade a confirmar, "+address.State)
			} else {
				parts = append(parts, "Cidade a confirmar")
			}
		}
	}

	if address.ZipCode != "" {
		parts = append(parts, "CEP: "+address.ZipCode)
	}

	return strings.Join(parts, "\n")
}

// formatAddressesForSelection formata m√∫ltiplos endere√ßos para sele√ß√£o
func formatAddressesForSelection(addresses []models.Address) string {
	if len(addresses) == 0 {
		return "Nenhum endere√ßo cadastrado."
	}

	if len(addresses) == 1 {
		return formatAddressForDisplay(addresses[0])
	}

	var parts []string
	parts = append(parts, "üìç **Endere√ßos cadastrados:**\n")

	for i, addr := range addresses {
		addressText := formatAddressForDisplay(addr)
		defaultMarker := ""
		if addr.IsDefault {
			defaultMarker = " ‚≠ê **(padr√£o)**"
		}

		parts = append(parts, fmt.Sprintf("**%d.** %s%s", i+1,
			strings.ReplaceAll(addressText, "\n", ", "), defaultMarker))
	}

	parts = append(parts, "\nüí° **Para usar um endere√ßo espec√≠fico, informe o n√∫mero (ex: 'usar endere√ßo 2')**")
	return strings.Join(parts, "\n")
}

// isAddressComplete verifica se um endere√ßo tem as informa√ß√µes essenciais
func isAddressComplete(address models.Address) bool {
	return address.Street != "" &&
		address.City != "" &&
		address.State != "" &&
		address.ZipCode != ""
}

// getDefaultSuggestionsByBusinessType retorna sugest√µes padr√£o baseadas no tipo de neg√≥cio
func (s *AIService) getDefaultSuggestionsByBusinessType(businessType string) []string {
	suggestions := map[string][]string{
		"farmacia":     {"medicamentos", "higiene pessoal", "cosm√©ticos"},
		"papelaria":    {"canetas e marcadores", "cadernos e blocos", "materiais de escrit√≥rio"},
		"supermercado": {"alimentos", "bebidas", "produtos de limpeza"},
		"eletronicos":  {"celulares", "inform√°tica", "eletr√¥nicos"},
		"roupas":       {"roupas masculinas", "roupas femininas", "cal√ßados"},
		"casa":         {"decora√ß√£o", "m√≥veis", "utilidades dom√©sticas"},
		"geral":        {"produtos em destaque", "ofertas", "novidades"},
	}

	if suggs, exists := suggestions[businessType]; exists {
		return suggs
	}

	return suggestions["geral"]
}

// handleVerificarEntrega verifica se a loja faz entregas em um determinado local
func (s *AIService) handleVerificarEntrega(tenantID uuid.UUID, args map[string]interface{}) (string, error) {
	log.Info().
		Str("tenant_id", tenantID.String()).
		Interface("args", args).
		Msg("üöö Verificando entrega para localiza√ß√£o")

	// Extrair dados dos argumentos
	local, _ := args["local"].(string)
	cidade, _ := args["cidade"].(string)
	estado, _ := args["estado"].(string)

	if local == "" {
		return "‚ùå Preciso saber o local (bairro ou regi√£o) para verificar se fazemos entregas.", nil
	}

	// Primeiro, obter informa√ß√µes da loja para saber a cidade/estado padr√£o
	storeInfo, err := s.deliveryService.GetStoreLocation(tenantID)
	if err != nil {
		log.Error().Err(err).Msg("Erro ao obter localiza√ß√£o da loja")
		return "üö´ N√£o consegui verificar a localiza√ß√£o da nossa loja. Entre em contato conosco para mais detalhes sobre entregas.", nil
	}

	// Se n√£o foi especificada cidade/estado, usar da loja
	if cidade == "" {
		cidade = storeInfo.City
	}
	if estado == "" {
		estado = storeInfo.State
	}

	// Validar se a loja tem endere√ßo configurado
	if !storeInfo.Coordinates {
		return "üö´ Nossa loja ainda n√£o tem endere√ßo configurado. Entre em contato conosco para verificar se atendemos sua regi√£o.", nil
	}

	// Tentar validar o endere√ßo usando apenas o bairro/local
	result, err := s.deliveryService.ValidateDeliveryAddress(tenantID, "", "", local, cidade, estado)
	if err != nil {
		log.Error().Err(err).Str("local", local).Msg("Erro ao validar endere√ßo de entrega")
		return "üö´ N√£o consegui verificar se atendemos essa regi√£o. Entre em contato conosco para mais detalhes sobre entregas.", nil
	}

	// Formatar resposta baseada no resultado
	if result.CanDeliver {
		switch result.Reason {
		case "whitelisted_area":
			return fmt.Sprintf("‚úÖ **Sim, fazemos entregas em %s!** üöö\n\nEsta regi√£o est√° em nossa √°rea de atendimento especial.", local), nil
		case "within_radius":
			return fmt.Sprintf("‚úÖ **Sim, fazemos entregas em %s!** üöö\n\nEsta regi√£o est√° dentro da nossa √°rea de atendimento (%s).", local, result.Distance), nil
		default:
			return fmt.Sprintf("‚úÖ **Sim, fazemos entregas em %s!** üöö", local), nil
		}
	} else {
		switch result.Reason {
		case "area_not_served":
			return fmt.Sprintf("üö´ Infelizmente n√£o fazemos entregas em %s.\n\nEntre em contato conosco para verificar outras op√ß√µes de atendimento.", local), nil
		case "outside_radius":
			return fmt.Sprintf("üö´ Infelizmente %s est√° fora da nossa √°rea de atendimento.\n\nEntre em contato conosco para verificar outras op√ß√µes de entrega.", local), nil
		case "no_store_location":
			return "üö´ Nossa loja ainda n√£o tem localiza√ß√£o configurada. Entre em contato conosco para verificar se atendemos sua regi√£o.", nil
		default:
			return fmt.Sprintf("üö´ N√£o conseguimos atender %s no momento.\n\nEntre em contato conosco para mais detalhes sobre nossa √°rea de atendimento.", local), nil
		}
	}
}

// handleConsultarEnderecoEmpresa retorna o endere√ßo da empresa/loja e envia localiza√ß√£o via WhatsApp
func (s *AIService) handleConsultarEnderecoEmpresa(tenantID, customerID uuid.UUID, customerPhone string) (string, error) {
	log.Info().
		Str("tenant_id", tenantID.String()).
		Str("customer_id", customerID.String()).
		Str("customer_phone", customerPhone).
		Msg("üìç Consultando endere√ßo da empresa")

	// Obter informa√ß√µes da loja
	storeInfo, err := s.deliveryService.GetStoreLocation(tenantID)
	if err != nil {
		log.Error().Err(err).Msg("Erro ao obter informa√ß√µes da loja")
		return "‚ùå N√£o consegui obter as informa√ß√µes de localiza√ß√£o da nossa empresa no momento. Entre em contato conosco para mais detalhes.", nil
	}

	// Verificar se h√° endere√ßo configurado
	if storeInfo.Address == "" {
		return "üìç **Nossa Localiza√ß√£o:**\n\nAinda estamos configurando nosso endere√ßo no sistema. Entre em contato conosco para obter informa√ß√µes sobre nossa localiza√ß√£o!", nil
	}

	// Formatar resposta com o endere√ßo
	response := fmt.Sprintf("üìç **Nossa Localiza√ß√£o:**\n\n%s", storeInfo.Address)

	// Adicionar cidade e estado se dispon√≠veis
	if storeInfo.City != "" && storeInfo.State != "" {
		response += fmt.Sprintf("\n%s - %s", storeInfo.City, storeInfo.State)
	} else if storeInfo.City != "" {
		response += fmt.Sprintf("\n%s", storeInfo.City)
	}

	// Adicionar informa√ß√£o sobre entrega se configurada
	if storeInfo.Coordinates && storeInfo.RadiusKm > 0 {
		response += fmt.Sprintf("\n\nüöö **√Årea de Entrega:** %.0f km de raio", storeInfo.RadiusKm)
	}

	response += "\n\nüí¨ Qualquer d√∫vida sobre como chegar ou nossa localiza√ß√£o, √© s√≥ perguntar!"

	// üìç ENVIAR LOCALIZA√á√ÉO VIA WHATSAPP API (em paralelo)
	if storeInfo.Coordinates && storeInfo.Latitude != 0 && storeInfo.Longitude != 0 {
		go func() {
			err := s.sendLocationToWhatsApp(tenantID, customerID, customerPhone, storeInfo)
			if err != nil {
				log.Error().
					Err(err).
					Str("customer_phone", customerPhone).
					Msg("Erro ao enviar localiza√ß√£o via WhatsApp API")
			} else {
				log.Info().
					Str("customer_phone", customerPhone).
					Float64("latitude", storeInfo.Latitude).
					Float64("longitude", storeInfo.Longitude).
					Msg("üìç Localiza√ß√£o enviada com sucesso via WhatsApp API")
			}
		}()
	}

	return response, nil
}

// sendLocationToWhatsApp envia a localiza√ß√£o da empresa via WhatsApp API externa
func (s *AIService) sendLocationToWhatsApp(tenantID, customerID uuid.UUID, customerPhone string, storeInfo *StoreLocationInfo) error {
	// Formatar o chatId (n√∫mero do cliente + @c.us)
	chatId := fmt.Sprintf("%s@c.us", customerPhone)

	// Nome da empresa e sess√£o - buscar informa√ß√µes reais do banco
	var companyName = "" //  N√£o existe Valor padr√£o
	var sessionID = ""   // N√£o existe  Valor padr√£o

	// Buscar tenant name - usando uma consulta direta ao banco atrav√©s de um service
	// Tentar obter informa√ß√µes do tenant atrav√©s do deliveryService ou outro service dispon√≠vel
	if tenant, err := s.getTenantInfo(tenantID); err == nil && tenant != nil {
		if tenant.Name != "" {
			companyName = tenant.Name
		}
	}

	// Buscar channel session - tentar obter atrav√©s de customerPhone
	if channel, err := s.getChannelByCustomer(tenantID, customerPhone); err == nil && channel != nil {
		if channel.Session != "" {
			sessionID = channel.Session
		}
	}

	log.Info().
		Str("tenant_id", tenantID.String()).
		Str("customer_id", customerID.String()).
		Str("company_name", companyName).
		Str("session", sessionID).
		Msg("üìç Preparando envio de localiza√ß√£o")

	// Use centralized ZapPlus client
	client := zapplus.GetClient()
	err := client.SendLocation(sessionID, chatId, storeInfo.Latitude, storeInfo.Longitude, companyName)
	if err != nil {
		log.Error().Err(err).Msg("‚ùå Erro ao enviar localiza√ß√£o via ZapPlus")
		return fmt.Errorf("erro ao enviar localiza√ß√£o: %w", err)
	}

	log.Info().
		Str("chat_id", chatId).
		Float64("latitude", storeInfo.Latitude).
		Float64("longitude", storeInfo.Longitude).
		Str("title", companyName).
		Msg("‚úÖ Localiza√ß√£o enviada com sucesso via ZapPlus")

	return nil
}

// getTenantInfo busca informa√ß√µes do tenant pelo ID
func (s *AIService) getTenantInfo(tenantID uuid.UUID) (*models.Tenant, error) {
	// Usar uma abordagem atrav√©s do settingsService que pode ter acesso a informa√ß√µes do tenant
	// ou usar o customerService para fazer uma query direta

	log.Debug().Str("tenant_id", tenantID.String()).Msg("Buscando informa√ß√µes do tenant")

	// Tentar usar customerService j√° que sabemos que tem acesso ao DB
	// A implementa√ß√£o CustomerServiceImpl tem um campo `db *gorm.DB`
	if customerSvc, ok := s.customerService.(*CustomerServiceImpl); ok {
		var tenant models.Tenant
		err := customerSvc.db.Where("id = ?", tenantID).First(&tenant).Error
		if err != nil {
			log.Debug().Err(err).Str("tenant_id", tenantID.String()).Msg("N√£o foi poss√≠vel buscar tenant")
			return nil, err
		}
		log.Info().
			Str("tenant_id", tenantID.String()).
			Str("tenant_name", tenant.Name).
			Msg("‚úÖ Tenant encontrado")
		return &tenant, nil
	}

	log.Debug().Msg("CustomerService n√£o √© do tipo esperado, usando fallback")
	return nil, fmt.Errorf("n√£o foi poss√≠vel acessar informa√ß√µes do tenant")
}

// getChannelByCustomer busca channel baseado no customerPhone e tenant
func (s *AIService) getChannelByCustomer(tenantID uuid.UUID, customerPhone string) (*models.Channel, error) {
	log.Debug().
		Str("tenant_id", tenantID.String()).
		Str("customer_phone", customerPhone).
		Msg("Buscando channel para customer")

	// Tentar usar customerService para acessar o banco
	if customerSvc, ok := s.customerService.(*CustomerServiceImpl); ok {
		// Primeiro, buscar o customer
		customer, err := s.customerService.GetCustomerByPhone(tenantID, customerPhone)
		if err != nil {
			log.Debug().Err(err).Msg("N√£o foi poss√≠vel encontrar customer")
			return nil, err
		}

		// Buscar conversation ativa para este customer
		var conversation models.Conversation
		err = customerSvc.db.
			Where("tenant_id = ? AND customer_id = ? AND status = ?",
				tenantID, customer.ID, "open").
			Order("updated_at DESC").
			First(&conversation).Error

		if err != nil {
			log.Debug().Err(err).
				Str("customer_id", customer.ID.String()).
				Msg("N√£o foi poss√≠vel encontrar conversa ativa")
			return nil, err
		}

		// Buscar o channel da conversa
		var channel models.Channel
		err = customerSvc.db.Where("id = ?", conversation.ChannelID).First(&channel).Error
		if err != nil {
			log.Debug().Err(err).
				Str("channel_id", conversation.ChannelID.String()).
				Msg("N√£o foi poss√≠vel buscar channel")
			return nil, err
		}

		log.Info().
			Str("channel_id", channel.ID.String()).
			Str("session", channel.Session).
			Msg("‚úÖ Channel encontrado")

		return &channel, nil
	}

	log.Debug().Msg("CustomerService n√£o √© do tipo esperado para buscar channel")
	return nil, fmt.Errorf("n√£o foi poss√≠vel acessar informa√ß√µes do channel")
}

// handleSolicitarAtendimentoHumano processa solicita√ß√µes de atendimento humano
func (s *AIService) handleSolicitarAtendimentoHumano(tenantID, customerID uuid.UUID, customerPhone string, args map[string]interface{}) (string, error) {
	log.Info().
		Str("tenant_id", tenantID.String()).
		Str("customer_id", customerID.String()).
		Str("customer_phone", customerPhone).
		Msg("üôã Processando solicita√ß√£o de atendimento humano")

	// Extrair motivo dos argumentos
	motivo := "Cliente solicitou atendimento humano"
	if motivoArg, ok := args["motivo"].(string); ok && motivoArg != "" {
		motivo = motivoArg
	}

	// Buscar informa√ß√µes do cliente
	customer, err := s.customerService.GetCustomerByPhone(tenantID, customerPhone)
	if err != nil {
		log.Error().Err(err).Msg("Erro ao buscar informa√ß√µes do cliente")
		customer = &models.Customer{
			Phone: customerPhone,
			Name:  "Cliente n√£o identificado",
		}
	}

	// Preparar mensagem para o grupo de alertas
	customerName := customer.Name
	if customerName == "" {
		customerName = "Cliente n√£o identificado"
	}

	// Enviar alerta para o grupo de alertas (em paralelo)
	go func() {
		err := s.alertService.SendHumanSupportAlert(tenantID, customerID, customerPhone, motivo)
		if err != nil {
			log.Error().
				Err(err).
				Str("customer_phone", customerPhone).
				Str("customer_name", customerName).
				Msg("‚ùå Erro ao enviar alerta de solicita√ß√£o de atendimento humano")
		} else {
			log.Info().
				Str("customer_phone", customerPhone).
				Str("customer_name", customerName).
				Str("reason", motivo).
				Msg("‚úÖ Alerta de solicita√ß√£o de atendimento humano enviado com sucesso")
		}
	}()

	// Resposta amig√°vel para o cliente
	response := "üëã **Atendimento Humano Solicitado**\n\n" +
		"Entendi que voc√™ gostaria de falar com um atendente humano.\n\n" +
		"‚úÖ **Sua solicita√ß√£o foi encaminhada para nossa equipe!**\n\n" +
		"üïê **Um de nossos atendentes entrar√° em contato com voc√™ em breve.**\n\n" +
		"üí¨ Enquanto isso, posso continuar te ajudando com informa√ß√µes sobre nossos produtos e pedidos."

	return response, nil
}

// formatProductsByCategoryComplete formata produtos organizados por categoria para cat√°logo completo
func (s *AIService) formatProductsByCategoryComplete(tenantID uuid.UUID, customerPhone string, products []models.Product) (string, error) {

	log.Info().
		Str("tenant_id", tenantID.String()).
		Str("customer_phone", customerPhone).
		Int("products_count", len(products)).
		Msg("üîç DEBUG: formatProductsByCategoryComplete called")

	// se products for maior que 100, retornar mensagem avisando que h√° o usuario precisa pesquisar por algum produto
	if len(products) > 100 {
		return "‚ùå Nosso cat√°logo √© muito grande para ser exibido completo. Por favor, pesquise por um produto espec√≠fico ou categoria para ver os itens dispon√≠veis.", nil
	}

	// Buscar todas as categorias do tenant
	categories, err := s.categoryService.ListCategories(tenantID)
	if err != nil {
		log.Warn().Err(err).Msg("üîç DEBUG: Error listing categories, using standard format")
		// Se erro ao buscar categorias, usar formato padr√£o
		return s.formatProductsStandard(tenantID, customerPhone, products)
	}

	log.Info().
		Int("categories_count", len(categories)).
		Msg("üîç DEBUG: Categories found")

	// Criar mapa de categorias por ID
	categoryMap := make(map[string]models.Category)
	for _, cat := range categories {
		categoryMap[cat.ID.String()] = cat
	}

	// Organizar produtos por categoria
	productsByCategory := make(map[string][]models.Product)
	productsWithoutCategory := []models.Product{}

	for _, product := range products {
		if product.CategoryID != nil && *product.CategoryID != uuid.Nil {
			categoryID := product.CategoryID.String()
			productsByCategory[categoryID] = append(productsByCategory[categoryID], product)
		} else {
			productsWithoutCategory = append(productsWithoutCategory, product)
		}
	}

	// Armazenar todos os produtos na mem√≥ria com numera√ß√£o sequencial
	allProducts := []models.Product{}

	// Adicionar produtos organizados por categoria (ordenados por sort_order)
	categoryKeys := make([]string, 0, len(productsByCategory))
	for catID := range productsByCategory {
		categoryKeys = append(categoryKeys, catID)
	}

	// Ordenar categorias por sort_order
	sort.Slice(categoryKeys, func(i, j int) bool {
		catA := categoryMap[categoryKeys[i]]
		catB := categoryMap[categoryKeys[j]]
		if catA.SortOrder != catB.SortOrder {
			return catA.SortOrder < catB.SortOrder
		}
		return catA.Name < catB.Name
	})

	result := "üõçÔ∏è **Cat√°logo Completo - Organizado por Categorias**\n\n"

	// Adicionar produtos por categoria
	for _, categoryID := range categoryKeys {
		category := categoryMap[categoryID]
		categoryProducts := productsByCategory[categoryID]

		if len(categoryProducts) > 0 {
			// Ordenar produtos dentro da categoria por sort_order, depois por nome
			sort.Slice(categoryProducts, func(i, j int) bool {
				if categoryProducts[i].SortOrder != categoryProducts[j].SortOrder {
					return categoryProducts[i].SortOrder < categoryProducts[j].SortOrder
				}
				return categoryProducts[i].Name < categoryProducts[j].Name
			})

			result += fmt.Sprintf("üìÇ **%s**\n", category.Name)
			if category.Description != "" {
				result += fmt.Sprintf("   %s\n", category.Description)
			}
			result += "\n"

			for _, product := range categoryProducts {
				allProducts = append(allProducts, product)
			}
		}
	}

	// Adicionar produtos sem categoria no final
	if len(productsWithoutCategory) > 0 {
		// Ordenar produtos sem categoria por sort_order, depois por nome
		sort.Slice(productsWithoutCategory, func(i, j int) bool {
			if productsWithoutCategory[i].SortOrder != productsWithoutCategory[j].SortOrder {
				return productsWithoutCategory[i].SortOrder < productsWithoutCategory[j].SortOrder
			}
			return productsWithoutCategory[i].Name < productsWithoutCategory[j].Name
		})

		for _, product := range productsWithoutCategory {
			allProducts = append(allProducts, product)
		}
	}

	// Armazenar na mem√≥ria e formatar
	productRefs := s.memoryManager.StoreProductList(tenantID, customerPhone, allProducts)

	// Reformatar resultado com produtos organizados
	result = "üõçÔ∏è **Cat√°logo Completo - Organizado por Categorias**\n\n"
	currentCategoryID := ""

	for _, productRef := range productRefs {
		// Encontrar o produto original para saber sua categoria
		var originalProduct models.Product
		for _, p := range allProducts {
			if p.ID == productRef.ProductID {
				originalProduct = p
				break
			}
		}

		// Verificar se mudou de categoria
		var productCategoryID string
		if originalProduct.CategoryID != nil {
			productCategoryID = originalProduct.CategoryID.String()
		} else {
			productCategoryID = "sem-categoria"
		}

		if currentCategoryID != productCategoryID {
			if currentCategoryID != "" {
				result += "\n"
			}

			if productCategoryID == "sem-categoria" {
				result += "üìÇ **Outros Produtos**\n\n"
			} else if category, exists := categoryMap[productCategoryID]; exists {
				result += fmt.Sprintf("üìÇ **%s**\n", category.Name)
				if category.Description != "" {
					result += fmt.Sprintf("   %s\n", category.Description)
				}
				result += "\n"
			}
			currentCategoryID = productCategoryID
		}

		var price string
		if productRef.SalePrice != "" && productRef.SalePrice != "0" {
			price = fmt.Sprintf("~~R$ %s~~ **R$ %s**", formatCurrency(productRef.Price), formatCurrency(productRef.SalePrice))
		} else {
			price = fmt.Sprintf("**R$ %s**", formatCurrency(productRef.Price))
		}

		result += fmt.Sprintf("   %d. **%s**\n", productRef.SequentialID, productRef.Name)
		result += fmt.Sprintf("      üí∞ %s\n", price)
	}

	result += "\nüí° Para ver detalhes: 'produto [n√∫mero]' ou 'produto [nome]'\n"
	result += "üõí Para adicionar ao carrinho: 'adicionar [n√∫mero] quantidade [X]'"

	return result, nil
}

// formatProductsStandard formata produtos no formato padr√£o (fallback)
func (s *AIService) formatProductsStandard(tenantID uuid.UUID, customerPhone string, products []models.Product) (string, error) {
	productRefs := s.memoryManager.StoreProductList(tenantID, customerPhone, products)

	result := "üõçÔ∏è **Produtos dispon√≠veis:**\n\n"

	for _, productRef := range productRefs {
		var price string
		if productRef.SalePrice != "" && productRef.SalePrice != "0" {
			price = fmt.Sprintf("~~R$ %s~~ **R$ %s**", formatCurrency(productRef.Price), formatCurrency(productRef.SalePrice))
		} else {
			price = fmt.Sprintf("**R$ %s**", formatCurrency(productRef.Price))
		}

		result += fmt.Sprintf("%d. **%s**\n", productRef.SequentialID, productRef.Name)
		result += fmt.Sprintf("   üí∞ %s\n", price)
		if productRef.Description != "" {
			desc := productRef.Description
			if len(desc) > 100 {
				desc = desc[:100] + "..."
			}
			result += fmt.Sprintf("   üìù %s\n", desc)
		}
		result += "\n"
	}

	result += "üí° Para ver detalhes, diga: 'produto [n√∫mero]' ou 'produto [nome]'\n"
	result += "üõí Para adicionar ao carrinho: 'adicionar [n√∫mero] quantidade [X]'"

	return result, nil
}
